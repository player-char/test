// –î–∏—Å–∫–æ—Ä–¥-–±–æ—Ç "–ö—Ä–∏–ø—É—à–∫–∞"


const Discord = require('discord.js');
const client = new Discord.Client();

const myToken = process.env.BOT_TOKEN;

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const myId = '311163859580747778';
// floodless channels
const floodless = [
	'175956780398936065',
];
// user ids to ignore
const ignores = [
	myId,
];
let wrecked = false;
let hidden = false;
let timestamps = {
	norm: -Infinity,
	good: -Infinity,
}

const since = Date.now();

// –≤—ã–¥–∞—ë—Ç true —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
function chance(a) {
	return Math.random() < a;
}

// –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
Array.prototype.pick = function(rand) {
	if (typeof rand == 'undefined') {
		// —Ç—É–ø–æ —Ä–∞–Ω–¥–æ–º–Ω–æ
		return this[Math.floor(this.length * Math.random())];
	} else {
		// –ø–æ –æ—Å—Ç–∞—Ç–∫—É
		return this[rand % this.length];
	}
}

// —Ñ–æ—Ä–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
function pluralize(n, arr) {
	let k = n % 10;
	return arr[(n - k) / 10 % 10 != 1 ? (k != 1 ? ([2, 3, 4].includes(k) ? 1 : 2) : 0) : 2];
}

// –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–µ–∂–∏–Ω–∫–∏
function sfTime(s) {
    return new Date(1420070400000 + s / 4194304);
}

// —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Å—Ç–µ–º–ø–∞–º–∏ —Å–ª–æ–≤–∞–º–∏
function dateDiff(d1, d2) {
	// –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0
	let diff = d2 - d1;
	
	let tarr = [1000, 60, 60, 24, Infinity];
	for (let i in tarr) {
		let x = tarr[i];
		tarr[i] = diff % x;
		diff = (diff - tarr[i]) / x;
	}
	
	tarr.shift(); // —É–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
	
	let warr = [
		['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
		['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
		['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
		['—Å—É—Ç–∫–∏', '—Å—É—Ç–æ–∫', '—Å—É—Ç–æ–∫'],
	];
	let sarr = [];
	
	for (let i = 3; i >= 0; i--) {
		if (!tarr[i]) {
			continue;
		}
		sarr.push(tarr[i] + ' ' + pluralize(tarr[i], warr[i]));
	}
	
	return sarr.join(', ');
}

// —Ö–µ—à –æ—Ç –±—É–∫–≤ —Å—Ç—Ä–æ–∫–∏.
// —á–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Å—Ç—Ä–æ–∫–∞, —Ç–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ –±–æ–ª—å—à–µ —á–∏—Å–ª–æ.
function hashie(str) {
	if (typeof str != 'string') {
		return 0;
	}
	let sum = 0;
	let pos = 0;
	for (let i = 0; i < str.length; i++) {
		if (str[i].match(/[0-9a-z–∞-—è—ë]/)) {
			let n = str.charCodeAt(i);
			// hashing machine
			sum += 13 + (((n % 29) ^ (n % 31) ^ (n % 43) ^ (pos++ % 7)) % 17);
		}
	}
	return sum;
}

function setStatus() {
	console.log(Date() + '| Hidden:', hidden);
	if (hidden) {
		client.user.setStatus('invisible');
	} else {
		client.user.setStatus('online');
		client.user.setGame('Discord');
	}
}

// —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –µ—ë –∏–º–µ–Ω–∏
function customReact(message, name) {
	if (!message.guild) {
		// private messaging
		return false;
	}
	let map = message.guild.emojis;
	for (let i of map) {
		if (i[1].name == name) {
			message.react(i[1]);
			return true;
		}
	}
	// 404
	return false;
}


// –º–∞—Å—Å–∏–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≥–æ, –Ω–∞ —á—Ç–æ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç
let responses = [
	
	// p: pattern
	// m: method (flags.r)
	// c: chance 0.0...1.0
	// d: direct {false (default) / true / 'indirect' (if mentioned or the phrase is clear)}
	// r: response (string or function)
	// t: timed cooldown ['timestamp_name', timeout]
	
	// creeper's response
	{
		p: /^ ?–Ω–µ([–∞—Ç])$/i,
		r: (m) => '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ' + m[1].toLowerCase() + '.',
	},
	// —Å—á–∏—Ç–∞–ª–æ—á–∫–∞ reversed
	{
		p: /^ ?> 1$/,
		m: 'say',
		r: ['1 <', '< 1', '1 >', '>1<', '<1>'],
	},
	// /hack
	{
		p: /^ ?\/?hack[?!. ]*$/i,
		r: 'Eleite Haxxor 1337.',
	},
	
	// –ñ–µ–ª–µ–∑–Ω–∞—è –î–≤–µ—Ä—å
	{
		p: /(>\|<|[zcsjh]h?|[–∂—à—Öwx]+|[\|il]{3})[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+–π?([–ªl]|[\/j][li\|\\]\\?)+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+–π?[zsc–∑—Å3]+[–Ωnh]+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+[a-z–∞-—è—ë0-9]*?[\s,.\?!\\\/\*=+-]*[dt–¥—Ç]+([wvb–≤—É—Ñ]|[\|il]{3})+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+[rp—Ä]+[a-z–∞-—è—ë0-9]*/gi,
		r: (m) => {
			for (let i = 0; i < m.length; i++) {
				if (!m[i].match(/^(–ñ–µ–ª–µ–∑–Ω(–∞—è|—É—é) –î–≤–µ—Ä—å|–ñ–µ–ª–µ–∑–Ω–æ–π –î–≤–µ—Ä(–∏|—å—é))$/)) {
					return 'pray to the Iron Door.';
				}
			}
		},
	},
	
	// –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã
	{
		p: /(^|[^–∞-—è—ë])(–¥–∞|–Ω—É) –ª–∞–¥–Ω–æ[?!. ]*$/i,
		r: '—Ö–æ–ª–æ–¥–Ω–æ-–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ.',
	},
	{
		p: /(^|[^–∞-—è—ë])–¥–∞ –Ω—É[?!. ]*$/i,
		r: '–Ω—É –¥–∞.',
	},
	{
		p: /(^|[^–∞-—è—ë])–Ω—É –¥–∞[?!. ]*$/i,
		r: '–¥–∞ –Ω—É?',
	},
	{
		p: /(^|[^–∞-—è—ë])(–∞|–∏) —á—Ç–æ[?!. ]*$/i,
		r: (m) => m[2].toLowerCase() + ' —Ç–æ.',
	},
	{
		p: /(^|[^–∞-—è—ë])–Ω—É –∏[?!. ]*$/i,
		r: '–Ω—É –∏ –Ω—É!',
	},
	{
		p: /creep[ @_-]creep[?!. ]*$/i,
		r: 'creeperize!',
	},
	{
		p: /(^|[^–∞-—è—ë])[—Ç–≤]—ã –∫—Ç–æ[?!. ]*$/i,
		r: '—Ç—Ä–æ–ª–ª—å –≤ –ø–∞–ª—å—Ç–æ.',
	},
	{
		p: /–ª–æ—Ö[?!.]*$/i,
		r: '–≤–æ –¥–≤–æ—Ä–µ —Ä–∞—Å—Ç—ë—Ç –≥–æ—Ä–æ—Ö.',
	},
	
	// nasty words end
	{
		p: /(^|[^–∞-—è—ë])[–±–º]–ª—è—Ç—å[?!.,]*$/i,
		r: '–Ω–µ—Ö–æ—Ä–æ—à–æ —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å.',
	},
	// nasty words
	{
		p: /((^|[^–∞-—è—ë])(([—Å–∞–æ—É–≤]|(–ø—Ä|[–¥–∑–≤–ø–Ω])[–∞–µ—ë–∏—ã—è—é–µ]|(—Ä[–∞–æ]|–≤)[—Å–∑]|[–æ–∞]—Ç)?(—Ö—É[–π–µ—è—é–∏—ë]|–ø[–∏–µ—ë—é–π]–∑[–∂–¥]|–¥—Ä(–æ—á|–∞—á(?!–ª))|–ø[–∏–µ]–¥[–æ–∏](?!–Ω))|[–µ—ë]–±|–º—É–¥[–∞–µ—ë–∏—ã—è—é–æ]|[–±–º]–ª(—è|—ç(?![–∫—Å]))|[–µ—ë]–ø—Ç)|[—å—ä–æ–∞–µ—ë—É][–µ—ë]–±|([fs]u|di)ck)/i,
		r: 'please, be polite!',
	},
	// dirtey words
	{
		p: /(^|[^–∞-—è—ë])((–ø–æ|–Ω–∞|–∑–∞|–≤—ã|—É|–ø—Ä–æ)?(—Å–∏?—Ä–∞[—Ç–ª—á–∫—à]|—Å—Ä–∏(^|[^–∞-—è—ë]|—Ç))|–¥[–µ—ë–∏]—Ä—å–º|–≥[–æ–∞]–≤–µ?–Ω|–∂[–æ–µ—ë]–ø|(–Ω–∞|–∑–∞|–≤—ã|–æ–±|—Ä–∞–∑)?–±–ª[–µ—ë]–≤|shit)/i,
		m: 'react',
		r: 'üöΩ',
	},
	// bad words
	{
		p: /(^|[^–∞-—è—ë"'`])[—Ç–≤]—ã[^–∞-—è—ë]*(–¥(–∞—É|–æ–≤–µ)–Ω|–∫—Ä[–∏–µ]—Ç–∏–Ω|—Å–≤–æ–ª[–∞–æ]—á|–∏–¥[–∏–µ]–æ—Ç|–º—Ä–∞–∑|–ª–æ[—Ö—à]|—É–±–ª—é–¥|–¥—É—Ä[–∞–æ–µ—ë]|–¥[–µ–∏]–±[–µ–∏]–ª)/i,
		r: '–ø—Ä–æ—Å—Ç–∏, –Ω–æ –æ–±–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ—Ö–æ—Ä–æ—à–æ.',
	},
	// dog words
	{
		p: /(^|[^–∞-—è—ë])—Å—É–∫[–∞–∏–µ—É]/i,
		m: 'react',
		r: 'üêï',
	},
	{
		p: /(^|[^–∞-—è—ë])—â–µ–Ω–æ?–∫/i,
		m: 'react',
		r: 'üê∂',
	},
	// aster*xx
	{
		p: /(^|[–∞-—è—ëa-z0-9 -?@`\[-\]^_{-~])\\?\*[–∞-—è—ëa-z]|[–∞-—è—ëa-z]\\?\*([–∞-—è—ëa-z0-9 -?@`\[-\]^_{-~]|$)/i,
		m: 'dm',
		r: (m) => {
			let t = m.input;
			t = t.replace(/(^|[^\\])\*\*(?=\S)(.*?\S)\*\*/ig, '$1$2');
			t = t.replace(/(^|[^\\])\*(?=\S)(.*?\S)\*/ig, '$1$2');
			//console.log(m.input, '->', t);
			if (t.match(/(^|[–∞-—è—ëa-z0-9 -?@`\[-\]^_{-~])\\?\*[–∞-—è—ëa-z]|[–∞-—è—ëa-z]\\?\*([–∞-—è—ëa-z0-9 -?@`\[-\]^_{-~]|$)/i)) {
				return '–ó–∞–∫—Ä—ã–≤–∞—Ç—å –º–∞—Ç –∑–≤—ë–∑–¥–æ—á–∫–æ–π –≤—Å—ë —Ä–∞–≤–Ω–æ —á—Ç–æ –æ—Ç—Å–∞—Å—ã–≤–∞—Ç—å –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏, –ø—Ä–∏–∫—Ä—ã–≤–∞—è—Å—å –ª–∞–¥–æ–Ω—å—é. (c) Godzii';
			}
		},
	},
	
	// deprecated
	{
		p: /(Dragon2488|Archengius)/,
		r: (m) => '`' + m[0] + '` is deprecated. Use `AntiquiAvium` instead.',
	},
	
	// –∫–∞–∫ —Ç–∞–∫?
	{
		p: /(^|[^–∞-—è—ë])–∫–∞–∫ (–∂–µ )?—Ç–∞–∫[?!]*$/i,
		r: [
			'–Ω—É –≤–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.',
			'–≤–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫-—Ç–æ —Ç–∞–∫ –≤–æ—Ç.',
			'–≤–æ—Ç –∫–∞–∫-—Ç–æ –≤–æ—Ç —Ç–∞–∫-—Ç–æ –≤–æ—Ç —Ç–∞–∫, –≤–æ—Ç –∫–∞–∫.',
			'–∫–∞–∫-—Ç–æ —Ç–∞–∫-—Ç–æ –∫–∞–∫-—Ç–æ —Ç–∞–∫.',
			'–∫–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –Ω–∏–∫–∞–∫-—Ç–æ –Ω–∏–∫–∞–∫.',
			'–∫–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –≤–æ—Ç –∫–∞–∫ –±—ã –Ω–µ —Ç–∞–∫.',
			'—Ç–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –∫–∞–∫-—Ç–æ —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∫–∞–∫.',
		],
	},
	
	// —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏
	{
		p: /(^|[^–∞-—è—ë])((–¥–æ–±—Ä|—Å–ø–æ–∫–æ–π–Ω)–æ–π –Ω–æ—á–∏|(–¥–æ–±—Ä—ã|—Ö–æ—Ä–æ—à–∏|–ø—Ä–∏—è—Ç–Ω—ã|—Å–ª–∞–¥–∫–∏)—Ö —Å–Ω–æ–≤)[,.?! ]*/i,
		d: 'indirect',
		r: [
			'—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!',
			'—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏.',
			'–¥–æ–±—Ä–æ–π –Ω–æ—á–∏!',
			'–¥–æ–±—Ä–æ–π –Ω–æ—á–∏.',
			'–¥–æ–±—Ä—ã—Ö —Å–Ω–æ–≤!',
			'—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤!',
		],
	},
	
	// –ø—Ä–æ—â–∞–Ω–∏–µ
	{
		p: /(^|[^–∞-—è—ë])(–ø–æ–∫–∞(?=([^–∞-—è—ë]|$))|–ø—Ä–æ—â–∞–π|–¥–æ (—Å–≤–∏–¥–∞–Ω[–∏—å]—è|—Å–∫–æ—Ä–æ–π( –≤—Å—Ç—Ä–µ—á–∏)?|–≤—Å—Ç—Ä–µ—á–∏))[,.?! ]*/i,
		d: 'indirect',
		r: () => {
			if (chance(0.2)) {
				return [
					'—ç–π, —Ç—ã –∫—É–¥–∞? –ù–µ –±—Ä–æ—Å–∞–π –º–µ–Ω—è!',
					'–Ω–µ —É—Ö–æ–¥–∏! –ú–Ω–µ —Å–∫—É—á–Ω–æ –æ–¥–Ω–æ–º—É!',
					'–∞–≥–∞, —â–∞—Å! –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!',
					'–Ω–µ –±—Ä–æ—Å–∞–π –º–µ–Ω—è –æ–¥–Ω–æ–≥–æ!',
					'—ç–π, –∞ –∫–∞–∫ –∂–µ —è?',
				];
			}
			return [
				'–ø–æ–∫–∞!',
				'–ø–æ–∫–∞.',
				'–ø–æ–∫–∞-–ø–æ–∫–∞.',
				'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
				'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è.',
				'–¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!',
			];
		},
	},
	
	// –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	{
		p: /(^|[^–∞-—è—ë])(–ø—Ä–∏–≤–µ—Ç(-–ø—Ä–∏–≤–µ—Ç|—Å—Ç–≤—É—é( (—Ç–µ–±—è|–≤–∞—Å))?)?|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π(—Ç–µ)?|–¥–æ–±—Ä(–æ–µ —É—Ç—Ä–æ|—ã–π –¥–µ–Ω—å|—ã–π –≤–µ—á–µ—Ä)|–∫—É-?–∫—É)[,.?! ]*/i,
		d: 'indirect',
		r: (m) => {
			if (m[2].toLowerCase().endsWith('–≤–µ—Ç') && chance(0.12)) {
				return '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç!';
			}
			return [
				'–ø—Ä–∏–≤–µ—Ç!',
				'–ø—Ä–∏–≤–µ—Ç.',
				'–ø—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç.',
				'–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!',
				'–∏ —Ç–µ–±–µ –Ω–µ —Ö–≤–æ—Ä–∞—Ç—å!',
			];
		},
	},
	
	// norm
	{
		p: /(^|[^–∞-—è—ë])–Ω–æ—Ä–º–∞–ª—å–Ω–æ([^–∞-—è—ë]|$)/i,
		r: '–Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏–ª–∏ —Ö–æ—Ä–æ—à–æ?',
		t: ['norm', 35000],
	},
	// good
	{
		p: /(^|[^–∞-—è—ë])—Ö–æ—Ä–æ—à–æ([^–∞-—è—ë]|$)/i,
		r: '—Ö–æ—Ä–æ—à–æ –∏–ª–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ?',
		c: 0.6,
		t: ['good', 35000],
	},
	
	// bug
	{
		p: /(^|[^–∞-—è—ë])–Ω–µ( ?(—Å–æ–≤—Å–µ–º|–æ—á–µ–Ω—å) )?((–ø—Ä–∞–≤–∏–ª—å|–∫–æ—Ä—Ä–µ–∫—Ç|–≤–µ—Ä|—Ç–æ—á)–Ω–æ)? —Ä–∞–±–æ—Ç–∞[–µ—é–∏]—Ç/i,
		m: 'react',
		r: 'üêõ',
	},
	// –∫—É–∫–∞—Ä–µ–∫—É
	{
		p: /–∫—É-?–∫–∞-?—Ä–µ-?–∫—É/i,
		m: 'react',
		r: 'üêì',
	},
	
	// yeah, but ...
	{
		p: /^yeah, but/im,
		m: 'say',
		r: '> Yeah, but\nYabbits live in the woods.',
	},
	
	// —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
	{
		p: /(^| )[ ()0-9.*\/+-]*[0-9][ ()0-9.*\/+-]*[*\/+-][ ()0-9.*\/+-]*[0-9][()0-9.*\/+-]*/g,
		r: (m, flags, floodey) => {
			if (m.length == 1) {
				try {
					let result = eval(m[0]); // eval = evil
					if (typeof result === 'number') {
						if (floodey) {
							flags.r = 'dm';
						}
						return String(parseFloat(result.toPrecision(15)));
					}
				} catch(e) {}
			}
		},
	},
	
	// gimme
	{
		p: /(?:^|[^–∞-—è—ë])(?:–≤—ã)?–¥–∞–π(?:—Ç–µ)?(?: –º–Ω–µ)? +([0-9]*)(?: —à—Ç—É–∫[–∏—É]? )? *([0-9–∞-—è—ëa-z '"&-]*)/i,
		r: (m, flags, floodey, message) => {
			let count = m[1] ? +m[1] : 64;
			let item = m[2].trim().toUpperCase();
			if (item.length <= 32 && item.length >= 2) {
				flags.r = 'say';
				return '*–í—ã–¥–∞–Ω–æ **' + count + '** —à—Ç—É–∫ **' + item + '** –∏–≥—Ä–æ–∫—É **<@' + message.author.id + '>**.*';
			}
		},
	},
	
	
	// —Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
	
	// –æ–Ω –≤–∞–º –Ω–µ –î—Ä–∞–≥–æ–Ω
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–¥—Ä–∞–≥–æ–Ω/i,
		r: ['–æ–Ω –≤–∞–º –Ω–µ –î—Ä–∞–≥–æ–Ω.', '#–æ–Ω–≤–∞–º–Ω–µ–¥—Ä–∞–≥–æ–Ω'],
	},
	
	// /help
	{
		d: true,
		p: /^ ?(\/help|(–ø–æ–∫–∞–∂–∏ )?(—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥|–∫–æ–º–∞–Ω–¥—ã)( –≤ —Å—Ç—É–¥–∏—é)?)[?!. ]*$/i,
		r: '—Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç. –ù–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —Ç–æ –≤–æ—Ç:\n'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, –≥–æ–ª–æ—Å` - –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫ –∫—Ä–∏–ø–∞–∫–∞ –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º –∫–∞–Ω–∞–ª–µ.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, —Ñ–∞—Å <username>` - –∑–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞ –∫ –∫—Ä–∏–ø–µ—Ä–∞–º –∑–µ–ª—ë–Ω—ã–º.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, –∫—É-–∫–∞-—Ä–µ-–∫—É!` - —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∑–∞–±–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–µ—Ç—É—Ö–∞—Ö.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, –¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥` - –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ –±–æ—Ç—É.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, eval <statement>` - –≤—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, —Ç—ã –∫—Ç–æ?` - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞.',
	},
	
	// –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
	{
		d: true,
		p: /^ *—á((—Ç|–µ–≥)?–æ|[–µ—ë])[?!. ]*$/i,
		r: (m) => '–Ω–∏—á' + (!m[1].match(/—Ç–æ/) ? m[1].toLowerCase() : '–µ–≥–æ') + ' (:',
	},
	{
		d: true,
		p: /^ *–∫–∞–∫[?!. ]*$/i,
		r: '–∞ –≤–æ—Ç —Ç–∞–∫!',
	},
	{
		d: true,
		p: /^ *(test|—Ç–µ—Å—Ç)[?!. ]*$/i,
		r: 'go go test yourself!',
	},
	{
		d: true,
		p: /^ *(—Ñ–∞|–≥–æ–ª–æ)—Å([^–∞-—è—ë]|$)/i,
		r: '—è —Ç–µ–±–µ –Ω–µ –ø—ë—Å!',
	},
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–¥–∞[?!. ]*$/i,
		r: '–Ω–∞ –ø–ª–∏—Ç–µ —Å–∫–æ–≤–æ—Ä–æ–¥–∞.',
	},
	
	// shutting up
	{
		d: true,
		p: /^ *(—É|–∑–∞)(–º–æ–ª—á–∏|—Ç–∫–Ω–∏—Å)([^–∞-—è—ë]|$)/i,
		m: 'react',
		r: 'üòã üòõ üòù üòë üò∑'.split(' '),
	},
	
	// getting out
	{
		d: true,
		p: /^ *(–æ—Ç((—Å—Ç–∞|–≤—è)–Ω—å|–≤–∞–ª–∏)|–≤–æ–Ω|–±—Ä—ã—Å—å|–ø—Ä–æ—á—å|–ø–æ—à[—ë–µ]–ª|—É(–π|—Ö[–æ–∞])–¥–∏)([^–∞-—è—ë]|$)/i,
		r: '–Ω–µ—Ç, –Ω–µ —É–π–¥—É, —è –Ω–∞–∏–≤–Ω—ã–π.',
	},
	
	// halting down
	{
		d: true,
		p: /^ *(–ø–µ—Ä–µ—Å—Ç–∞–Ω—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏|—Ö–≤–∞—Ç–∏—Ç|–Ω–µ (–Ω(–∞–¥|—É–∂–Ω)–æ|—Å—Ç–æ–∏—Ç)|–Ω–µ—Ç —Å–º—ã—Å–ª–∞|–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ)([^–∞-—è—ë]|$)/i,
		r: (m) => m[1].toLowerCase() + ' –ø–∏—Å–∞—Ç—å "' + m[1].toLowerCase() + '".',
	},
	
	// monster
	{
		d: true,
		p: /^ *((—Å|–ø–æ)–¥–æ—Ö–Ω–∏|(—Å?–≥–æ|(–≤—ã|–ø–æ|—É)–º)—Ä–∏|–≤—ã–ø–∏–ª–∏—Å—å|die|burn)/i,
		r: 'you are a monster.',
	},
	
	// you're bad (or good, it doesn't matter)
	{
		d: true,
		p: /^ *—Ç—ã ([–∞-—è—ë]+)/i,
		r: (m) => {
			if (m[1].match(/([—ã–æ–∏]–π|[–∞—è]—è|[–æ–µ][–µ—ë])$/i)) {
				return (m[1] == '–Ω–∞–∏–≤–Ω—ã–π' ? '–¥–∞' : '–Ω–µ—Ç') + ', —è –Ω–∞–∏–≤–Ω—ã–π.';
			}
		},
	},
	
	// eval = evil
	{
		d: true,
		p: /(^|[^–∞-—è—ë])eval/i,
		r: [
			'eval —Ä–∞–≤–Ω–æ evil —Ä–∞–≤–Ω–æ –Ω–∞ –≥–æ–ª–æ–≤—É anvil.',
			'eval —Ç–∞–∫–æ–π evil, —Ö–∞–∫–µ—Ä –≤–∏—Ä—É—Å –Ω–∞—Ç—Ä–∞–≤–∏–ª.',
			'–∑–∞ —Ç–∞–∫–æ–π –ø—Ä–æ—Å—Ç–æ–π eval –º–æ–¥–µ—Ä –±–∞–Ω—ã —Ä–∞–∑–¥–∞–≤–∞–ª.',
			'–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π eval, –∫–æ–º–ø —Ç—Ä–∏ –Ω–æ—á–∏ –æ—Å—Ç—ã–≤–∞–ª.',
			'–∑–∞ —Ç–∞–∫–æ–π –ø—Ä–æ—Å—Ç–æ–π eval –∞–¥–º–∏–Ω –æ–ø–∫—É –æ—Ç–∑—ã–≤–∞–ª.',
			'—Å–∫–≤–æ–∑—å –æ–¥–∏–Ω —Ç–∞–∫–æ–π eval —Ö–∞–∫–µ—Ä –¥–µ–Ω—å–≥–∏ –æ—Ç–º—ã–≤–∞–ª.',
			'–∫–∞–∫-—Ç–æ –±—ã–ª –æ–¥–∏–Ω eval, –∫–æ–¥–µ—Ä —Å—Ç–µ–Ω—ã –æ—Ç–º—ã–≤–∞–ª.',
			'–º–∏–ª—ã–π –¥–æ–±—Ä–µ–Ω—å–∫–∏–π eval –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏–≤–∞–ª.',
			'–¥–æ–±—Ä—ã–π –º–∏–ª–µ–Ω—å–∫–∏–π eval –≤–∞–ª–∏—Ç —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø–æ–≤–∞–ª.',
			'–∑–∞–ø—É—Å—Ç–∏–ª –æ–¥–∏–Ω eval, —Å–µ—Ä–≤–µ—Ä –ª—ë–≥ –∏ –Ω–µ –≤—Å—Ç–∞–≤–∞–ª.',
		],
	},
	
	// drop database
	{
		d: true,
		p: /drop\s+(database|table)/i,
		m: 'say',
		r: (m) => {
			let obj = (m[1] == 'table' ? '‚î≥‚îÅ‚î≥' : '[DATABASE]');
			let jbo = (m[1] == 'table' ? '‚îª‚îÅ‚îª' : '[Íì±Íì¢ÍìØÍì≠ÍìØÍìïÍìØÍì∑]');
			return [
				obj + ' „Éé(Àö-Àö„Éé)\n\n(‚ïØ¬∞–¥¬∞Ôºâ‚ïØÔ∏µ ' + jbo,
				'(„áèÀö-Àö)„áè ' + obj + '\n\n' + jbo + 'Ô∏µ ‚ï∞(¬∞–¥¬∞‚ï∞)',
				jbo + '„Éü„áè(‡≤†Áõä‡≤†)„ÉéÂΩ°' + jbo,
			];
		},
	},
	
	// where are you now?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Ç—ã (–≥–¥–µ|–∫—É–¥–∞|—Ç—É—Ç|–∑–¥–µ—Å—å)|(–≥–¥–µ|–∫—É–¥–∞) —Ç—ã)/i,
		r: [
			'—è —Ç—É—Ç.',
			'—è –∑–¥–µ—Å—å.',
			'–ø—Ä–∏–≤–µ—Ç, —è —Ç—É—Ç.',
			'–∫—É-–∫—É.',
			'–≤–æ—Ç —è –≥–¥–µ!',
			'–¥–∞ –∑–¥–µ—Å—å —è, –∑–¥–µ—Å—å.',
			'–¥–∞-–¥–∞, —è –∑–¥–µ—Å—å.',
		],
	},
	
	// —Å–∫–∏–Ω—å —Ñ–æ—Ç–∫—É
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Å–∫–∏–Ω—å|(–¥–∞–π|–º–æ–∂–Ω–æ|–∏–∑–≤–æ–ª—å) (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|—É–≤–∏–¥–µ—Ç—å|–≥–ª—è–Ω—É—Ç—å)) ((—Ä–∞–Ω–¥–æ–º–Ω—É|[—Å—Ç]–≤–æ)[—é–µ—ë] )?—Ñ–æ—Ç(–æ|–∫—É|–æ–≥—Ä–∞—Ñ–∏—é)/i,
		m: 'dm',
		r: () => new Promise((resolve) => https.get('https://www.google.com/search?tbm=isch&q=minecraft+creeper'
		+ ['', '+png', '+photo', '+screenshot', '+cute', '+dance', '+jpg'].pick(), response => {
			console.log('Search results started...');
			let data = '';
			
			response.on('data', part => {
				data += part;
			});
			
			response.on('end', () => {
				console.log('Search results ended...');
				if (+(response.statusCode) != 200) {
					console.log('Search Failed,', response.statusCode);
					resolve('–ü–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è. –°–µ—Ä–≤–µ—Ä–∞ –æ—Ç–≤–µ—Ç: ' + response.statusCode);
				}
				let pos = -1;
				let arr = [];
				while ((pos = data.indexOf(':","data:image/', pos + 1)) != -1) {
					arr.push(pos);
				}
				if (!arr.length) {
					console.log('Nothing found!', data);
					resolve('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å!');
				}
				pos = arr.pick() + 4;
				let end = data.indexOf('"', pos + 1);
				let base = data.slice(pos, end);
				base = JSON.parse('"' + base + '"');
				console.log('Base64: ' + base);
				resolve({text: '–¥–µ—Ä–∂–∏:', files: [base]});
			});
			
			response.on('error', err => {
				console.log('Can\'t load search results: ');
				console.error(err);
				resolve('–£–ø—Å, –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —á—Ç–æ-—Ç–æ –æ–±–æ—Ä–≤–∞–ª–æ—Å—å.');
			});
		})),
	},
	
	// –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–∫–∞–∫(–æ–µ)? (—Ç–≤–æ[–µ—ë] |—É —Ç–µ–±—è )?–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/i,
		r: () => '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ' + ['.', '!', ' :)', ' c:', ' (:'].pick(),
	},
	// —á—Ç–æ –¥–µ–ª–∞–µ—à—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—á—Ç–æ (—Ç—ã )?(—Å–µ–π—á–∞—Å )?–¥–µ–ª–∞–µ—à—å|—á–µ–º (—Ç—ã )?(—Å–µ–π—á–∞—Å )?–∑–∞–Ω(—è—Ç|–∏–º–∞–µ—à—å—Å—è))[?! ]*$/i,
		r: '–æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.',
	},
	// –∫–∞–∫ –¥–µ–ª–∞?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–∫–∞–∫ (—Ç–≤–æ–∏ |—É —Ç–µ–±—è )?–¥–µ–ª–∞[?! ]*$/i,
		r: () => '–∫–∞–∫ —Å–∞–∂–∞ –±–µ–ª–∞ ' + [':)', '(:'].pick(),
	},
	// –≥–¥–µ –ø—Ä–æ–ø–∞–¥–∞–ª?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–≥–¥–µ (—Ç—ã )?(((–ø–æ–∑–∞)?–≤—á–µ—Ä–∞|–¥–æ —ç—Ç–æ–≥–æ|—Ä–∞–Ω—å—à–µ|—É—Ç—Ä–æ–º|–¥–Ω—ë–º) )?–ø—Ä–æ–ø–∞–¥–∞–ª[?! ]*$/i,
		r: '—Ç–∞–º-—Ç–æ —è –∏ –ø—Ä–æ–ø–∞–¥–∞–ª, –≥–¥–µ –ì–µ—Ç–∞–ø –ö–∞—Å—Ç–∏—Ç –ø—Ä–æ–¥–∞–ª.',
	},
	// –∫—Ç–æ —Ç—ã?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫—Ç–æ [–≤—Ç]—ã|[–≤—Ç]—ã –∫—Ç–æ)( –≤–æ–æ–±—â–µ)?( —Ç–∞–∫–æ–π( –≤–æ–æ–±—â–µ)?)?[?! ]*$/i,
		r: '–Ω–µ—É–∂–µ–ª–∏ —Ç—ã –µ—â—ë –Ω–µ –∑–Ω–∞–µ—à—å?',
	},
	// –∏–≥—Ä–∞?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–≤ –∫–∞–∫—É—é –∏–≥—Ä—É|–≤–æ —á—Ç–æ) (—Ç—ã )?(—Å–µ–π—á–∞—Å )?–∏–≥—Ä–∞–µ—à—å[?! ]*$/i,
		r: () => '–≤ ' + [
			'–î–∏—Å–∫–æ—Ä–¥',
			'–∏–≥—Ä—É "–æ—Ç–≤–µ—Ç—å –Ω–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π –∑–∞–ø—Ä–æ—Å"',
			'JavaScript',
			'–∑–∞—Ñ–ª—É–∂–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
		].pick() + '.',
	},
	// —á—Ç–æ —É–º–µ–µ—à—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—á—Ç–æ (—Ç—ã )?—É–º–µ–µ—à—å[?! ]*$|(—Ç—ã )?—É–º–µ–µ—à—å [–∞-—è—ë]+)/i,
		r: '–æ—Ç–∫—É–¥–∞ –º–Ω–µ –∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é? –Ø –∂–µ –Ω–µ –º–æ–≥—É —É–≤–∏–¥–µ—Ç—å —Å–º—ã—Å–ª —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, —è –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è—é—Å—å –∏ –æ—Ç—Å—ã–ª–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
	},
	// –Ω–∞ —á—ë–º —Ä–∞–±–æ—Ç–∞–µ—à—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–Ω–∞ (—á—ë–º|–∫–∞–∫–æ(–π —ç–Ω–µ—Ä–≥–∏–∏|–º —Ç–æ–ø–ª–∏–≤–µ)) (—Ç—ã )?(—Å–µ–π—á–∞—Å )?—Ä–∞–±–æ—Ç–∞–µ—à—å[?! ]*$/i,
		r: '–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ç—Ä–∞—Ç–∏—à—å, –Ω–∞–±–∏—Ä–∞—è —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.',
	},
	// —è–∑—ã–∫?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è )?(—Ç—ã )?(—Ä–∞–±–æ—Ç–∞–µ—à—å|–Ω–∞–ø–∏—Å–∞–Ω)[?! ]*$/i,
		r: '–Ω–∞ JavaScript.',
	},
	// –Ω–∞ —á—ë–º –Ω–∞–ø–∏—Å–∞–Ω?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–Ω–∞|–≤) —á—ë–º (—Ç—ã )?–Ω–∞–ø–∏—Å–∞–Ω[?! ]*$/i,
		r: '–Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –Ω–∞–ø–∏—Å–∞–Ω, –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.',
	},
	// –±–ª–æ–∫–Ω–æ—Ç?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–Ω–∞|–≤) –∫–∞–∫–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ —Ç—ã –Ω–∞–ø–∏—Å–∞–Ω[?! ]*$/i,
		r: (m) => m[2].toLowerCase() + ' Notepad++.',
	},
	
	// –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫–µ–º (—Ç—ã )?—Ä–∞–±–æ—Ç–∞–µ—à—å|–∫–∞–∫–∞—è (—É —Ç–µ–±—è )?(–ø—Ä–æ—Ñ–µ—Å—Å–∏—è|—Ä–∞–±–æ—Ç–∞|–¥–æ–ª–∂–Ω–æ—Å—Ç—å))[?! ]*$/i,
		r: 'Floodey bot.',
	},
	// –∑–∞—Ä–ø–ª–∞—Ç–∞?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Å–∫–æ–ª—å–∫–æ (—Ç–µ–±–µ )?–ø–ª–∞—Ç—è—Ç( —Ç–µ–±–µ)?|–∫–∞–∫–∞—è (—É —Ç–µ–±—è )?–∑–∞—Ä–ø–ª–∞—Ç–∞)( –Ω–∞ (—Ç–≤–æ–µ–π )?—Ä–∞–±–æ—Ç–µ)?[?! ]*$/i,
		r: '–ø–ª–∞—Ç—è—Ç –º–Ω–µ –æ—Ç 100 000 –¥–æ 2 000 000 –º–∏–ª–ª–∏—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü.',
	},
	
	// —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–≤ —á—ë–º|–∫–∞–∫–æ[–≤–π]) —Å–º—ã—Å–ª( —É)? –∂[–∏—ã]–∑–Ω–∏[?! ]*$/i,
		r: '¬Ø\\\_(„ÉÑ)\_/¬Ø',
	},
	
	// —Ç—ã –±–æ—Ç?
	{
		d: true,
		p: /(?:^|[^–∞-—è—ë])[–≤—Ç]—ã,? (?:—á–∞—Å–æ–º,? )?(?:–Ω–µ )?((?:—Ä–æ)?–±–æ—Ç|—Å–∫—Ä–∏–ø—Ç)/i,
		r: (m) => (m[1] == '—Å–∫—Ä–∏–ø—Ç' ? '–¥–∞' : '–Ω–µ—Ç') + ', —è —Å–∫—Ä–∏–ø—Ç.',
	},
	
	// —Å–∫–∞–∑–∞–ª?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])—á(—Ç–æ|[–æ–µ—ë]) (—Ç—ã )?(–º–µ–ª–µ—à—å|–Ω–µ—Å—ë—à—å|—Å–∫–∞–∑–∞–ª|–≥–æ–≤–æ—Ä–∏(—à—å|–ª))[?! ]*$/i,
		r: (m) => {
			let verb = m[3].toLowerCase();
			if (verb == '–º–µ–ª–µ—à—å') {
				return '–µ—Å–ª–∏ –±—ã —è –±—ã–ª –º–µ–ª—å–Ω–∏—Ü–µ–π, —è –±—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –º–æ–ª–æ–ª –∑–µ—Ä–Ω–æ.';
			}
			if (verb == '–Ω–µ—Å—ë—à—å') {
				return '–¥–≤–æ–π–∫—É –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —è –Ω–µ—Å—É.';
			}
			return '—è –Ω–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏–ª!';
		},
	},
	
	// –∫–∞–∫ –¥–æ–ª–≥–æ –æ–Ω–ª–∞–π–Ω
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫–∞–∫ –¥(–∞–≤–Ω|–æ–ª–≥)–æ|—Å–∫–æ–ª—å–∫–æ( –≤—Ä–µ–º–µ–Ω–∏)?)( —É–∂–µ)? (—Ç—ã( —É–∂–µ)? )?(–æ–Ω–ª–∞–π–Ω|—Ä–∞–±–æ—Ç–∞–µ—à—å|–∑–∞–ø—É—â–µ–Ω)( —É–∂–µ)?[?! ]*$/i,
		r: () => {
			let now = new Date();
			return '—è –æ–Ω–ª–∞–π–Ω —É–∂–µ ' + dateDiff(since, +now) + '.\n'
			+ '–í—Ä–µ–º—è –Ω–∞ –º–æ–∏—Ö —á–∞—Å–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: ' + new Date(since) + '.\n'
			+ '–í—Ä–µ–º—è –Ω–∞ –º–æ–∏—Ö —á–∞—Å–∞—Ö —Å–µ–π—á–∞—Å: ' + now + '.';
		},
	},
	
	// –ª—é–±–∏—à—å ...?
	{
		d: true,
		p: /^ *((—Ç—ã )?–ª—é–±–∏—à—å [–∞-—è—ë]+|[–∞-—è—ë]+ –ª—é–±–∏—à—å[?! ]*$)/i,
		r: '–∫–æ—Ä–∏–∞–Ω–¥—Ä –ª—é–±–ª—é.',
	},
	
	// –ø–æ—á–µ–º—É?
	{
		d: true,
		p: /^ *(?:(?:–Ω–µ )?–∑–Ω–∞–µ—à—å, )?–ø–æ—á–µ–º—É ?([0-9–∞-—è—ëa-z '",~:%<>*&#=+-]*)/i,
		r: (m) => {
			let h = hashie(m[1].toLowerCase());
			if (h < 100) {
				return '–ø–æ—Ç–æ–º—É —á—Ç–æ!';
			}
			return '–ø–æ—Ç–æ–º—É —á—Ç–æ ' + [
				'–≤—Å–µ —Ç–∞–∫ –¥—É–º–∞—é—Ç.',
				'—Ç–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ.',
				'–∫—Ä–∏–ø–µ—Ä—ã –∑–µ–ª—ë–Ω—ã–µ.',
				'–Ω–µ–±–æ –≥–æ–ª—É–±–æ–µ.',
				'–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç —É–∂–µ –Ω–µ —Ç–æ—Ä—Ç.',
				'–≤—Å–µ —Ç–∞–∫ —Å—á–∏—Ç–∞—é—Ç.',
				'—Ç–∞–∫ –Ω–∞–¥–æ.',
				'—Ç—ã —Ç–∞–∫ –¥—É–º–∞–µ—à—å.',
				'—Ç–µ–±–µ —Ç–∞–∫ –∫–∞–∂–µ—Ç—Å—è.',
				'–º–∏—Ä –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–µ–Ω.',
				'—Ä–∞–Ω–¥–æ–º –Ω–µ—Ä–∞–Ω–¥–æ–º–µ–Ω.',
			].pick(h);
		},
	},
	
	// –∫—Ç–æ —Ç–∞–∫–æ–π –∫—Ç–æ-—Ç–æ
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∑–Ω–∞–µ—à—å|[—á–∫]—Ç–æ (–∑–∞|—Ç–∞–∫(–æ–π|–∞—è|–æ–µ)))/i,
		r: (m, flags, floodey, message) => {
			let known = {
				'(—Ä—É–ª—å?—Ç|rult)': () => {
					return customReact(message, 'rult');
				},
				'(–Ω–∞–º–∏|namiya)': '–ù–∞–º–∏—è –Ω–µ —É–º–µ–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å. –ù–µ –ø–∏—à–∏—Ç–µ –µ–π –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É. –û–Ω–∞ –≤–∞–º –Ω–µ –ø–æ–º–æ–∂–µ—Ç.',
				'(–∫–∞–º–∫|kamka)': '–ö–∞–º–∫–∞ –ª—é–±–∏—Ç, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –≥–æ—Ä–∏—Ç.',
				'(–æ–ª–µ–Ω|deer)': () => {
					if (chance(0.5)) {
						flags.r = 'react';
						return 'ü¶å';
					}
					return '–æ–ª–µ–Ω—å ' + [
						'–±—ã–ª –∑–∞–≤–µ–∑—ë–Ω —á–µ–ª–æ–≤–µ–∫–æ–º –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏—é –∏ –ù–æ–≤—É—é –ó–µ–ª–∞–Ω–¥–∏—é.',
						'–æ–ª–∏—Ü–µ—Ç–≤–æ—Ä—è–µ—Ç –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ, –≤–µ–ª–∏—á–∏–µ, –∫—Ä–∞—Å–æ—Ç—É, –≥—Ä–∞—Ü–∏—é, –±—ã—Å—Ç—Ä–æ—Ç—É.',
					].pick();
				},
				'(google|–≥—É–≥–æ?–ª)': '–Ω–µ –∑–Ω–∞—é, –∑–∞–≥—É–≥–ª–∏.',
				'(–ª–∞–π–º[–æ–∞0]–Ω|laim[o0]n)': '–õ–∞–π–º–æ–Ω - —Å–æ–∑–¥–∞—Ç–µ–ª—å –õ–∞–π–º—Å—Ç—É–¥–∏–∏, –õ–∞–π–º–•—Ä–æ–º–∞ –∏ –õ–∞–π–º–û–°, –∞ —Ç–∞–∫–∂–µ –õ–∞–π–º–ú–æ–±–∏–ª—è, –õ–∞–π–º–®–æ–ø–∞, –õ–∞–π–º–ö–æ–∏–Ω–∞ –∏ –õ–∞–π–º–°–∏—Ç–∏.',
				'(—Ö–∞–π–≤[–æ–∞]–Ω|haiv[o0]n)': '–ö—Ä–∞—Å–Ω—ã–π –û–ª–µ–Ω—å.',
				'(–≤–∞—Å[—è—é]|vasya)': '–í–∞—Å—è - –Ω—ã–Ω–µ—à–Ω–∏–π –∞–¥–º–∏–Ω –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç–∞.',
				'([–∫—Å–∑][–æ–∞]–ª—É–º[–±–ø]|c[o0]lumb)': '–ï–≥–æ –í–µ–ª–∏—á–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ—Ñ–æ—Ä –ö–æ–ª—É–º–±.',
				//'(–±—É–º–∞(–≥|–∂–∫)–∞|paper)': '.',
				'(–∞–≤–∏—É–º|avium)': 'üê¶üåÑ.',
				'(–¥–∏—Å–∫–æ—Ä–¥|discord)': '–î–∏—Å–∫–æ—Ä–¥ - –º–µ—Å—Ç–æ, –≥–¥–µ –º—ã –æ–±–∏—Ç–∞–µ–º.',
				'(—Ä—É—Ç—Å?—á–∏|rutschi)': '–∞, —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞ —Å–æ–≤–∫–∞—Ö —Ç–∞—â–∏—Ç.',
				'(–≥–µ—Ç–∞–ø|getup)': () => {
					if (chance(0.4) && customReact(message, 'orangeCaster')) {
						return true;
					}
					return '–ì–µ—Ç–∞–ø - –∫–∞—Å—Ç–∏—Ç–∏–∑–∞—Ç–æ—Ä –ó–µ–º–µ–ª—å –†–∞–Ω–¥–æ–º—Å–∫–∏—Ö.';
				},
				'(–æ—Ä–∞–Ω–∂|–∫–∞—Å—Ç–µ—Ä)': () => {
					flags.r = 'react';
					return 'üçπ';
				},
				'(–∫–∞—Å—Ç–∏—Ç|castit)': 'CastIT - –ø–æ–ª—É–∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π —Å–∞–π—Ç –ì–µ—Ç–∞–ø–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ, –∫ —Ç–æ–º—É –∂–µ, –≤—ã–≥–æ—Ä–µ–ª –¥–æ–º–µ–Ω.',
				'—Å–º–µ—Ç–∞–Ω': '—Å–º–µ—Ç–∞–Ω–∞ –≤–∫—É—Å–Ω–∞—è.',
				'–∫—Ä–∏–ø(–µ—Ä|–∞–∫)': '–∫—Ä–∏–ø–µ—Ä - –∑–µ–ª—ë–Ω—ã–π –º–æ–Ω—Å—Ç—Ä –∏–∑ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞.',
				'(–º(–∞–π–Ω|–∏–Ω–µ)[–∫—Å]—Ä–∞—Ñ—Ç|minecraft)': 'Minecraft - –∏–≥—Ä–∞, –±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –º–µ–Ω—è –±—ã –Ω–µ –±—ã–ª–æ.',
				'–ª–∞–π–∫–æ–±—Å–∫': () => {
					return '–õ–∞–π–∫–æ–±—Å–∫ - –≥–æ—Ä–æ–¥, —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç ' + ['–∫—É—Ä–µ–Ω–∏—è', '–∫–æ—Ä–æ–±–∫–æ—Ñ–æ–±–æ–≤', '–æ–≤—Ü–µ–º–æ–±–∏–ª–µ–π', '–≥—Ä–∏—Ñ–µ—Ä—Å—Ç–≤–∞'].pick() + '.';
				},
				'(–ª–∞–π–∫–æ–±|lik0oob)': '–õ–∞–π–∫–æ–± - –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞ –õ–∞–π–∫–æ–±—Å–∫.',
				'(—Ä–∞–Ω–¥–æ–º ?–∫—Ä–∞—Ñ—Ç|random ?craft)': '–†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç - —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–∫–æ–≥–¥–∞ –±—ã–ª —Ç–æ—Ä—Ç–æ–º.',
				'(—Ä–Ω–∫—Ä|rncr)': 'RnCr - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞—Ä–æ–¥–∏—è –Ω–∞ –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç.',
				'(lv|lucky|–ª–∞–∫–∏)': 'LuckyVerse - –æ–¥–∏–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç–∞.',
				'(javascript|js)': 'JavaScript - —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è —Ä–∞–±–æ—Ç–∞—é.',
				'(–ø–∏—Ç–æ–Ω|python)': '–ü–∏—Ç–æ–Ω - —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è –Ω–µ —Ä–∞–±–æ—Ç–∞—é.',
				'–ø–µ—Ç—É[—Ö—á]': () => {
					flags.r = 'react';
					return 'üêì';
				},
				'–±–∞–Ω(?![–∫—Ç–Ω–¥—á—è])': '–±–∞–Ω - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.',
				'—Ç–æ—Ä—Ç': '—Ç–æ—Ä—Ç–∏–∫ - –≤—Ä–∞–Ω—å—ë!',
				'–ª—é–±–æ–≤—å': 'The love is a lie. If you love you soon will cry.',
				'–ø–ª[–µ–∞–æ]–µ—Ä': '–¢–æ–º–º–∏ –í–µ—Ä—Å–µ—Ç—Ç–∏ –¥–≤–æ—Ä–∞–º–∏ –ø–æ—à—ë–ª. –í –≥–ª—É—Ö–æ–º –ø–µ—Ä–µ—É–ª–∫–µ ' + ['–±–∞–∑—É–∫—É', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∞–ª–º–∞–∑—ã'].pick() + ' –Ω–∞—à—ë–ª.',
				'(—Ç—ã|—Å–µ–±—è|–∫—Ä–∏–ø—É—à–∫)': '–æ—Ç–∫—É–¥–∞ –º–Ω–µ –∑–Ω–∞—Ç—å, –∫—Ç–æ —è —Ç–∞–∫–æ–π?',
				'(—è|–º–µ–Ω—è)': '–ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–µ–±—è –≤ –∑–µ—Ä–∫–∞–ª–æ –∏ —É–≤–∏–¥–∏—à—å.',
			};
			
			let lc = m.input.toLowerCase();
			for (let p in known) {
				if (lc.match('(^|[^–∞-—è—ë])' + p)) {
					let result = (typeof known[p] == 'function' ? known[p]() : known[p]);
					if (result) {
						return result;
					}
				}
			}
			
			return [
				'–ø–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ—é.',
				'–∫—Ä–∏–ø–µ—Ä –µ–≥–æ –∑–Ω–∞–µ—Ç.',
				'—Å–ø—Ä–æ—Å–∏ —É –ì—É–≥–ª–∞.',
				'–Ω–µ, –Ω–µ —Å–ª—ã—à–∞–ª.',
				'–Ω–µ–∞, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ.',
				'—á—Ç–æ-—Ç–æ –Ω–µ –ø—Ä–∏–ø–æ–º–Ω—é —Ç–∞–∫–æ–≥–æ.',
				'—ç–º–º.. —á—Ç–æ? –ù–µ, –Ω–µ —Å–ª—ã—à–∞–ª.',
			];
		},
	},
	
	// –≥–æ –≤ –ª—Å
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–≥–æ|–¥–∞–≤–∞–π|–∏–¥–∏|–¥—É–π|–ø–æ(—à–ª–∏|–π–¥—ë–º)|–∑–∞–π–¥–∏) (–ª—É—á—à–µ )?(–∫–æ –º–Ω–µ )?–≤ (–ª—Å|–ø–µ—Ä–µ–ø–∏—Å–∫—É)/i,
		m: 'dm',
		r: '–¥–∞-–¥–∞, —è —Ç—É—Ç.',
	},
	
	
	// —Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç—å - –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ
	
	// –≥–æ –≤ –ª—Å
	{
		d: true,
		p: /(^|[^–∞-—è—ë])—Ç–∞–º –≤–∏–¥–Ω–æ –±—É–¥–µ—Ç/i,
		r: '–≤–∏–¥–Ω–æ-—Ç–æ —Å–µ–π—á–∞—Å –≤–∏–¥–Ω–æ, –∞ —Ç–∞–º –ø—Ä–æ–º–∞–∂–µ—à—å ‚Äî –±—É–¥–µ—Ç –æ–±–∏–¥–Ω–æ!',
	},
	
	// bad creeper
	{
		p: /(^|[^–∞-—è—ë])((?:–∫—Ä–∏–ø[–∞-—è—ë]+|[—Ç–≤]—ã) )?(?:[-‚Äí‚Äì‚Äî‚Äï] )?(?:(?:—Ç—É–ø|–ø–ª[–∞–æ]—Ö)[–∞-—è—ë]*|–±[—è–∞]–∫[–∞–∏])( –∫—Ä–∏–ø[–∞-—è—ë]+)?$/i,
		m: 'react',
		r: (m) => (m[2] || m[3] ? 'üò≠' : false),
	},
	
	// :banana:
	{
		p: /–±–∞–Ω–∞–Ω/i,
		m: 'react',
		r: 'üçå',
	},
	
	// :–ø–∏–Ω–≥–≤–∏–Ω:
	{
		p: /–ø–∏–Ω–≥–≤–∏/i,
		m: 'react',
		r: 'üêß',
	},
	
	// :–ø–∏–Ω–≥:
	{
		p: /–ø[–∏–æ]–Ω–≥/i,
		m: 'react',
		r: 'üèì',
	},
	
	// ignored
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∏–≥–Ω–æ—Ä|—á—Å|–Ω—É —Ç–µ–±—è)/i,
		m: 'react',
		r: 'üòë',
	},
	
	// :saw:
	{
		p: /(–∑–∞|–≤—ã|—Ä–∞—Å|–æ—Ç|–Ω–∞|—Å|–ø–µ—Ä–µ)?–ø–∏–ª[–∏–µ—é]/i,
		r: (m, flags, floodey, message) => {
			if (customReact(message, 'saw')) {
				return true;
			}
		},
	},
	
	// —Ä–æ–∂–æ–∫
	{
		p: /(^|[^–∞-—è—ë])—Ä[–æ–∞]–∂[–æ–µ—ë]–∫/i,
		m: 'react',
		r: 'ü•ê',
	},
	
	// win
	{
		p: /(^|[^–∞-—è—ë])(—è|–º—ã) (–ø–æ–±–µ–¥–∏|–≤—ã–∏–≥—Ä–∞|–∑–∞—Ç–∞—â–∏|—Å–¥–µ–ª–∞|—É—Å–ø–µ)–ª/i,
		m: 'react',
		r: 'üèÖ üèÖ üèÖ üèÜ üçå üê© üìØ üé∫'.split(' '),
	},
	
	// dropical trink
	{
		p: /(^|[^–∞-—è—ë])(–∫–∞—Å—Ç–µ—Ä|—Å–æ–∫|juic)/i,
		c: 0.5,
		m: 'react',
		r: 'üçπ',
	},
	
	// :apple:
	{
		p: /apple/i,
		m: 'react',
		r: 'üçè üçè üçé'.split(' '),
	},
	
	// screams
	{
		p: /–∞{10,}[1! ]*/i,
		m: 'react',
		r: 'üôÄ',
	},
	
	// honeywasp
	{
		p: /(^|[^–∞-—è—ëa-z])((—É|–∑–∞|–ø–æ|–∏–∑)?–∂–∞–ª(—å|–∫–æ)|–æ—Å—É|osu)([^–∞-—è—ëa-z]|$)/i,
		m: 'react',
		r: 'üêù',
	},
	
	// :creeper:
	{
		p: /(^|[^–∞-—è—ë])(creep|–∫—Ä–∏–ø)/i,
		c: 0.75,
		r: (m, flags, floodey, message) => {
			if (customReact(message, 'creeper')) {
				return true;
			}
		},
	},
	
	// the love is a lie, if you love you soon will cry.
	{
		p: /(^|[^–µ])(^|[^–∞-—è—ë])–ª—é–±–ª—é/i,
		m: 'react',
		r: 'ü§•',
	},
	
	// —Å–∫—Ä–æ–π—Å—è/–ø–æ—è–≤–∏—Å—å
	{
		d: true,
		p: /^ *(((–≤–æ—Ä–æ—Ç|–≤–µ—Ä–Ω|–ø–æ(–∫–∞–∂|—è–≤))–∏—Å—å)|(—Å(–∫—Ä–æ|–º–æ|–ª–µ)–π|—Å–ø—Ä—è—á—å)—Å—è)[,.?! ]*/i,
		r: (m) => {
			hidden = !m[2];
			setStatus();
			return true;
		},
	},
	
	// debug info
	{
		d: true,
		p: /^ *(—Å–ª–µ–π –∏–Ω—Ñ—É|–¥–µ–±–∞–≥)( –≤ –ª—Å)?[!. ]*$/i,
		r: (m) => {
			let t = '—Å–ª–∏–≤ –∏–Ω—Ñ—ã –æ —Ä–∞–±–æ—Ç–µ (–∑–∞ –¥–∞–Ω–Ω—ã–π —Å–µ–∞–Ω—Å):';
			
			t += '–Ø –æ–Ω–ª–∞–π–Ω —É–∂–µ ' + dateDiff(since, +now) + '.\n';
			t += '–í—Ä–µ–º—è –Ω–∞ –º–æ–∏—Ö —á–∞—Å–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: \n`' + new Date(since) + '`.\n';
			t += '–í—Ä–µ–º—è –Ω–∞ –º–æ–∏—Ö —á–∞—Å–∞—Ö —Å–µ–π—á–∞—Å: \n`' + now + '`.';
			
			t += '–ó–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ: `' + stat.uses + '`.';
			t += '–ó–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ª—Å: `' + stat.usesdm + '`.';
			t += '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: `' + (stat.times / stat.uses) + ' –º—Å`.';
			t += '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: `' + stat.ltime + ' –º—Å`.';
			t += '–®–∏—à–µ–∫ –Ω–∞–±–∏—Ç–æ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: `' + stat.errors + '`.';
			
			return true;
		},
	},
	
	// fishing
	{
		d: true,
		p: /—Ö–æ—á–µ—à—å|–¥–∞–≤–∞–π/i,
		c: 0.8,
		m: 'react',
		r: 'üé£',
	},
	
	// Discord bot
	{
		d: true,
		p: /–±–æ—Ç/i,
		c: 0.05,
		r: '–ë–∏–ø –ë—É–ø –ë–£–ø –ë–ò–ø.',
	},
	
	// –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∑–≤–∞–ª–∏
	{
		d: true,
		p: /^/,
		r: (m, flags, floodey, message, mentioned) => {
			if (chance(0.4) && (!message.guild || !floodey)) {
				if (mentioned !== true) {
					// –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–ª–∏, –∞ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –ª—Å
					return true;
				}
				return [
					'–∞?',
					'—á—Ç–æ?',
					'–º–º?',
					'–∑–∞—á–µ–º –∑–≤–∞–ª?',
					'–∫—É-–∫—É.',
					'–ø—Ä–∏–≤–µ—Ç.',
					'–¥–∞ –ª–∞–¥–Ω–æ, –º–æ–∂–µ—à—å –Ω–µ –ø—Ä–∏–∑—ã–≤–∞—Ç—å. –í—Å—ë —Ä–∞–≤–Ω–æ —è –µ—â—ë –º–∞–ª–æ —á–µ–≥–æ —É–º–µ—é.',
				];
			} else {
				flags.r = 'react';
				return 'üëã üñê üòë üòê üòÅ üôÉ üôÑ üòì üò™ üò∑ üò∂ üçå üìØ üé∫ üè∏'.split(' ');
			}
		},
	},
];

// –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
function capReply(message, text, flags) {
	let attach = null;
	if (text.files && typeof text.text == 'string') {
		attach = text.files;
		text = text.text;
	}
	
	if (Array.isArray(text)) {
		//if (Array.isArray(text[0])) {
		//	// set flag in array
		//	flags.r = text.shift()[0];
		//}
		text = text.pick();
	}
	
	if (!text || text === true) {
		return;
	}
	
	if (flags.r != 'react' && (flags.r != 'reply' || !message.guild)) {
		// Capitalizing
		text = text.slice(0, 1).toUpperCase() + text.slice(1);
	}
	
	let opt;
	if (attach) {
		opt = {files: attach};
	}
	
	let f = {
		'reply': () => message.reply(text, opt), // reply w/ @mention
		'say': () => message.channel.send(text, opt), // just say
		'dm': () => message.author.send(text, opt), // force private conversation
		'react': () => message.react(text, opt), // put a reaction instead
	};
	
	if (!f[flags.r]) {
		console.log('Unknown reply type:', flags.r);
		return;
	}
	
	f[flags.r]();
}

// —á–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –±—É–¥–µ–º
function checkReply(message, flags) {
	let mentioned = message.mentions.users.has(myId) || (!message.guild ? 'dm' : false);
	let lc = message.content.trim();
	let m = null;
	let now = Date.now();
	let floodey = message.guild && (floodless.indexOf(message.channel.id) != -1);
	
	cutOff = (m, lc) => (m.index ? (lc.slice(0, m.index) + ' ') : '') + lc.slice(m.index + m[0].length);
	
	// <@...> mentioning
	m = lc.match('<@' + myId + '>[,.?! ]*');
	if (m) {
		lc = cutOff(m, lc);
	}
	
	// text name mentioning
	m = lc.match(/([,.?!] *|^)(–∫—Ä–∏–ø(—É—à–∫–∞|–∞–∫?|–µ—Ä(–∞—Å—Ç)?)|creep(er|ah))([,.?!] *|$)/i);
	if (m) {
		mentioned = true;
		lc = cutOff(m, lc);
	}
	
	// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ
	for (let item of responses) {
		// direct
		if (item.d === true && !mentioned) {
			continue;
		}
		// chance
		if (typeof item.c === 'number' && !chance(item.c)) {
			continue;
		}
		// check cooldown
		if (item.t && timestamps[item.t[0]] > now) {
			continue;
		}
		
		let m = lc.match(item.p);
		
		if (!m) {
			continue;
		}
		
		// indirect
		if (item.d === 'indirect' && !mentioned && m[0].length != lc.length) {
			continue;
		}
		
		let resp = item.r;
		
		// exec if function
		if (typeof resp === 'function') {
			resp = resp(m, flags, floodey, message, mentioned);
		}
		
		if (!resp) {
			continue;
		}
		
		// set cooldown
		if (item.t) {
			timestamps[item.t[0]] = now + item.t[1];
		}
		
		// method
		if (item.m) {
			flags.r = item.m;
		}
		
		if (typeof resp.then == 'function') {
			resp.then((resp) => capReply(message, resp, flags));
		} else {
			capReply(message, resp, flags);
		}
		return;
	}
}

function processMessage(message) {
	try {
		let flags = {
			r: 'reply', // reply with mentioning by default
		};
		// –∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç
		checkReply(message, flags);

	} catch(e) {
		console.error(e);
		//wrecked = true;
		//message.reply(e.name + ': ' + e.message);
	}
}

// –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
client.on('message', message => {
	if (wrecked || message.system || message.author.bot || message.author.id == myId) {
		return;
	}
	
	try {
		
		if (typeof mus != 'undefined' && message.guild && mus[message.guild.id] && mus[message.guild.id].tid == message.channel.id) {
			//musicProcess(message);
			
			return;
		}
		
		// delay is necessary for correct message ordering
		// because sometimes bot is too fast
		setTimeout(processMessage, 80, message);
		
	} catch(e) {
		console.error(e);
		//wrecked = true;
		//message.reply(e.name + ': ' + e.message);
	}
});

// —Å—Ä–∞–∑—É, –∫–∞–∫ –∑–∞–π–¥—ë—Ç
client.on('ready', () => {
	console.log('I am ready!');
	setStatus();
});


client.login(myToken);


// –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏
// discord.js –Ω–µ —Å–º–æ–≥, —Ç–∞–∫ —á—Ç–æ –º—É–∑—ã–∫–∞ —á–µ—Ä–µ–∑ Discordie.

const Discordie = require('discordie');
var clientMusic = new Discordie({autoReconnect: true});
var debugMusic = true;

// –¥–∞–Ω–Ω—ã–µ –æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
let mus = {
	maxList: 20,
	'175951720990507008': {
		vid: '315439572710326284', // voice channel id
		tid: '315445827772481537', // text channel id
		vch: null, // voice channel object
		tch: null, // text channel object
		adding: false,
		list: [],
		skip: [],
		users: 0,
		c: null, // connection
		e: null, // encoder
		curr: null,
		stat: null,
	},
};

let musMsgLifespan = 5000;

const dl = require('youtube-dl');
const https = require('https');

clientMusic.connect({token: myToken});

clientMusic.Dispatcher.on("GATEWAY_READY", e => {
	clientMusic.User.setStatus('invisible');
	console.log('Discordie is ready!');
	//_f();
});

/*
function _f() {
	clientMusic.Channels.get("315439572710326284").join(false, false).then(c => {
		console.log('Connected.');
	}).catch(e => {
		console.log(e);
		_f();
	});
}
*/

clientMusic.Dispatcher.on("MESSAGE_CREATE", (e) => {
	const message = e.message;
	const content = message.content;
	const channel = message.channel;
	const guild = channel.guild;
	
	if (!guild) {
		return;
	}
	
	try {
		// –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ç—å —Å–µ–±—è
		if (ignores.indexOf(message.author.id) !== -1) {
			return;
		}
		
		if (!mus[guild.id] || mus[guild.id].tid != channel.id) {
			return;
		}
		
		let vch = guild.voiceChannels.find(c => c.id == mus[guild.id].vid);
		
		// debug test
		if (debugMusic && content == 'stop') {
			vch.leave();
			autoRemove(message);
			return;
		}
		
		if (debugMusic && content == 'join') {
			console.log('Started!!!');
			let vch = guild.voiceChannels.find(c => c.id == mus[guild.id].vid);
			vch.join(false, false).then((c) => {
				console.log('Joined!!!');
				var encoder = c.voiceConnection.createExternalEncoder({
					type: 'ffmpeg',
					format: 'mp3',
					source: 'https://saxifra.ga/123.mp3',
				});
				encoder.play();
				encoder.once('end', () => {
					console.log('Left!!!');
					vch.leave();
				});
			});
			autoRemove(message);
			return;
		}
		
		if (debugMusic && content == 'deaf') {
			console.log('Started!!!');
			let vch = guild.voiceChannels.find(c => c.id == mus[guild.id].vid);
			vch.join(false, true).then((c) => {
				console.log('Joined!!!');
				var encoder = c.voiceConnection.createExternalEncoder({
					type: 'ffmpeg',
					format: 'mp3',
					source: 'https://saxifra.ga/123.mp3',
				});
				encoder.play();
				encoder.once('end', () => {
					console.log('Left!!!');
					vch.leave();
				});
			});
			autoRemove(message);
			return;
		}
		
		if (debugMusic && content[0] == '$') {
			console.log('Started!!!');
			vch.join(false, false).then((c) => {
				try {
					console.log('Joined!');
					dl.getInfo(content.slice(1), ['--skip-download'], function (err, info) {
						if (err) {
							console.error(err);
						} else if (info) {
							console.log(info.url);
							var encoder = c.voiceConnection.createExternalEncoder({
								type: 'ffmpeg',
								format: 'pcm',
								source: info.url,
							});
							encoder.play();
							console.log('Now playing: "' + info.title + '"');
							channel.sendMessage('–ö—Ä–∏–ø–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: "' + info.title + '"');
							encoder.once('end', () => {
								console.log('Left.');
								vch.leave();
							});
						}
					});
				} catch(e) {
					console.error(e);
					vch.leave();
				}
			});
			autoRemove(message);
			return;
		}
		
		// test
		if (message.content == '%%%') {
			debugMusic = false;
			autoRemove(message);
			return;
		}
		
		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		musicProcess(message);
	} catch(e) {
		console.log('Discordie Error!');
		console.error(e);
	}
});

// —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
function autoRemove(message) {
	setTimeout(function() {
		message.delete();
	}, musMsgLifespan);
}

// –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
function ret(cmus, result) {
	console.log('ret: ', result);
	result = String(result);
	if (!result) {
		return;
	}
	setTimeout(() => {
		cmus.tch.sendMessage(result).then(message => {
			autoRemove(message);
		});
	}, 150);
}

function encodeSearchQuery(q) {
	return encodeURIComponent(q).split('%20').join('+');
}

function decodeHTML(s) {
	return s.replace(/&#(\d{1,8});/g, function(a, b) {return String.fromCharCode(+b)});
}

function escMD(s) {
	return s.replace(/([`*~_\\])/g, '\\$1');
}

function musicProcess(message) {
	const channel = message.channel;
	const guild = channel.guild;
	
	const cmus = mus[message.guild.id];
	let uc = message.content.trim();
	let m;
	
	cmus.vch = guild.voiceChannels.find(c => c.id == cmus.vid);
	cmus.tch = channel;
	
	autoRemove(message);
	
	// play music
	//m = uc.match(/https?:\/\/[0-9a-zA-Z.\/?=%#_+-]+/);
	m = uc.match(/(youtu\.be\/|watch\?v=)([0-9a-zA-Z_-]+)/);
	if (m) {
		musicPut(message, m[2], -1);
		return;
	}
	
	// skip
	if (uc == '-') {
		//ret(cmus, '–°–∫–∏–ø –ø–æ–∫–∞ —á—Ç–æ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ—Ç–æ–º –¥–æ–¥–µ–ª–∞—é.');
		musicSkip(message);
		return;
	}
	
	// search
	m = uc.match(/^(?:\+([0-9]{0,2})|\?) +(.*)$/);
	if (m) {
		let pos = typeof m[1] == 'undefined' ? Math.floor(Math.random() * 25565) : +m[1];
		musicPut(message, m[2].trim(), pos);
		return;
	}
	
	// stop
	if (musicDebug && uc == 'kick') {
		musicStop(cmus);
		return;
	}
}

function musicSkip(message) {
	let cmus = mus[message.guild.id];
	
	if (!cmus.c || !cmus.curr) {
		return ret(cmus, '–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–µ—á–µ–≥–æ, –∏ —Ç–∞–∫ —Ç–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.');
	}
	
	if (!cmus.vch.members.find(c => c.id == message.author.id)) {
		return ret(cmus, '–≠–π, –ø–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ —Å–ª—É—à–∞–µ—à—å –º—É–∑—ã–∫—É. –ó–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª `' + cmus.vch.name + '`.');
	}
	
	let already = cmus.skip.indexOf(message.author.id) != -1;
	if (!already) {
		cmus.skip.push(message.author.id);
	}
	
	cmus.users = cmus.vch.members.length;
	let need = Math.floor(cmus.users / 2);
	let len = cmus.skip.length;
	
	if (len >= need) {
		ret(cmus, '–ú—É–∑—ã–∫–∞ —Å–∫–∏–ø–Ω—É—Ç–∞.');
		if (cmus.e) {
			cmus.e.stop();
		}
		// event will be dispatched
	} else {
		if (already) {
			ret(cmus, '–£–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ. –ü–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–æ—Ç–∏–≤).');
		} else {
			ret(cmus, '–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω (' + len + ' / ' + need + ').');
		}
		musicUpdate(cmus);
	}
}

function musicPut(message, q, search) {
	let cmus = mus[message.guild.id];
	
	q = q.slice(0, 80);
	
	if (!q.length) {
		return;
	}
	
	console.log('"' + q + '", ' + search);
	
	cmus.users = cmus.vch.members.length;
	
	if (!cmus.vch.members.find(c => c.id == message.author.id)) {
		return ret(cmus, '–≠–π, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª `' + cmus.vch.name + '`, –¥–ª—è –∫–æ–≥–æ —è –∏–≥—Ä–∞—Ç—å-—Ç–æ –±—É–¥—É?');
	}
	
	if (cmus.list.length >= mus.maxList) {
		musicRejoin(cmus);
		return ret(cmus, '–î–æ–≤–æ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å, –ø—É—Å—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–µ –¥–æ–∏–≥—Ä–∞–µ—Ç.');
	}
	
	cmus.adding = true;
	
	message.guild.voiceChannels.find(c => c.id == cmus.vid).join(false, false).then((c) => {
		if (!cmus.adding && !cmus.c) {
			cmus.vch.leave();
		}
	}).catch(console.error);
	
	console.log('Continued...');
	
	if (search != -1) {
		// searching
		https.get('https://www.youtube.com/results?search_query=' + encodeSearchQuery(q), response => {
			console.log('Search results started...');
			let data = '';
			
			response.on('data', part => {
				data += part;
			});
			
			response.on('end', () => {
				cmus.adding = false;
				console.log('Search results ended...');
				if (+(response.statusCode) != 200) {
					return ret(cmus, '–ü–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è. –°–µ—Ä–≤–µ—Ä–∞ –æ—Ç–≤–µ—Ç: ' + response.statusCode);
				}
				let pos = -1;
				if (search) {
					let arr = [];
					while ((pos = data.indexOf('context-item-id="', pos + 1)) != -1) {
						arr.push(pos);
					}
					if (arr.length) {
						pos = arr[search % arr.length];
					}
				} else {
					pos = data.indexOf('context-item-id="', 0);
				}
				if (pos == -1) {
					return ret(cmus, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.');
				}
				let piece = data.substr(pos, 9000);
				let link = piece.match(/"([^"]+)"/)[1];
				let title = decodeHTML(piece.match(/yt-uix-tile-link[^>]+>([^<]*)</)[1]);
				let author = decodeHTML(piece.match(/g-hovercard[^>]+>([^<]*)</)[1]);
				musicPush(cmus, link, message.author, title, author);
			});
			
			response.on('error', err => {
				cmus.adding = false;
				console.log('Can\'t load search results: ');
				console.error(err);
				return ret(cmus, '–£–ø—Å, –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —á—Ç–æ-—Ç–æ –æ–±–æ—Ä–≤–∞–ª–æ—Å—å.');
			});
		});
	} else {
		// direct video url
		https.get('https://www.youtube.com/embed/' + q, response => {
			console.log('Request started...');
			let data = '';
			
			response.on('data', part => {
				data += part;
			});
			
			response.on('end', () => {
				cmus.adding = false;
				console.log('Request ended...');
				if (+(response.statusCode) != 200) {
					return ret(cmus, '–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è. –°–µ—Ä–≤–µ—Ä–∞ –æ—Ç–≤–µ—Ç: ' + response.statusCode);
				}
				let title = decodeHTML(data.match(/<title>([^<]*)</)[1]);
				//let author = decodeHTML(piece.match(/g-hovercard[^>]+>([^<]*)</)[1]);
				musicPush(cmus, q, message.author, title, "...");
			});
			
			response.on('error', err => {
				cmus.adding = false;
				console.log('Can\'t load search results: ');
				console.error(err);
				return ret(cmus, '–£–ø—Å, –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ —á—Ç–æ-—Ç–æ –æ–±–æ—Ä–≤–∞–ª–æ—Å—å.');
			});
		});
	}
}

function musicPush(cmus, url, user, title, author) {
	cmus.list.push({
		title: title,
		user: user,
		author: author,
		url: url,
	});
	
	ret(cmus, '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ' + title);
	
	musicRejoin(cmus);
	musicUpdate(cmus);
}

function musicRejoin(cmus) {
	if (!cmus.c) {
		console.log('Rejoining...');
		cmus.c = 'pending';
		
		// connection bugs or lags
		cmus.vch.join(false, false).then(c => {
			console.log('Rejoined.');
			cmus.c = c.voiceConnection;
			cmus.users = cmus.vch.members.length;
			try {
				musicPlay(cmus);
				console.log('Set to play.');
			} catch(e) {
				ret(cmus, '–£–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å.');
				console.log('Failed to play the music.');
				console.error(e);
				musicPlay(cmus);
			}
		}).catch(e => {
			ret(cmus, '–ê—É—á, —è —Å–ø–æ—Ç–∫–Ω—É–ª—Å—è –æ —Å—Ç—É–ø–µ–Ω—å–∫—É, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏–ª –≤ –∫–∞–Ω–∞–ª.');
			console.log('Failed to join voice channel.');
			console.error(e);
			musicStop(cmus);
		});
	}
}

function musicPlay(cmus) {
	if (cmus.list.length == 0) {
		ret(cmus, '–ú—É–∑—ã–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –≤—ã—Ö–æ–∂—É –∏–∑ –∫–∞–Ω–∞–ª–∞.');
		musicStop(cmus);
		return;
	}
	
	cmus.curr = cmus.list.shift();
	cmus.skip = [];
	console.log('> [https://youtu.be/' + cmus.curr.url + ']');
	
	dl.getInfo('https://www.youtube.com/watch?v=' + cmus.curr.url, ['--skip-download'], function (err, info) {
		if (err || !info) {
			console.error(err);
			ret(cmus, '–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∏–º ' + cmus.curr.url);
			musicPlay(cmus);
		} else if (info) {
			musicConnect(cmus, info);
		}
	});
}

function musicConnect(cmus, info) {
	//console.log(info.url);
	if (cmus.e) {
		cmus.e.destroy();
	}
	var encoder = cmus.e = cmus.c.createExternalEncoder({
		type: 'ffmpeg',
		format: 'pcm',
		source: info.url,
	});
	encoder.play();
	console.log('Now playing: "' + info.title + '"');
	ret(cmus, '–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫–∞ "' + info.title + '"');
	encoder.once('end', () => {
		console.log('Music ended.');
		cmus.curr = null;
		musicPlay(cmus);
	});
	encoder.on('error', (e) => {
		console.log('Encoder error: ' + e);
		cmus.curr = null;
		musicPlay(cmus);
	});
}

function musicStr(item) {
	return escMD(item.title) + ',\n<https://youtu.be/' + item.url +
	'>,\n–¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ' + escMD(item.user.nick || item.user.username) + '.';
}

function musicUpdate(cmus) {
	if (!cmus.c) {
		return;
	}
	
	let ctext = '–¢–µ–∫—É—â–µ–µ: ' + (cmus.curr ? musicStr(cmus.curr) : '<–ø—É—Å—Ç–æ>') + '\n';
	
	cmus.users = cmus.vch.members.length;
	
	console.log(cmus.members);
	
	if (cmus.skip.length) {
		ctext += '–ó–∞ –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: ' + cmus.skip.length + ' –∏–∑ ' + Math.floor(cmus.users / 2) + '.\n'
	}
	
	ctext += '\n';
	
	ctext += '–û—á–µ—Ä–µ–¥—å: [' + cmus.list.length + ' / ' + mus.maxList + ']';
	if (cmus.list.length) {
		for (let i = 0; i < cmus.list.length; i++) {
			ctext += '\n' + (i + 1) + ') ' + musicStr(cmus.list[i]);
		}
	} else {
		//ctext += ' <–ø—É—Å—Ç–æ>';
	}
	
	ctext += '\n\n–° –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤—Å—ë –ø—Ä–æ—Å—Ç–æ:';
	ctext += '\n"**<—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –≤ YouTube>**" ‚Äï –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É –∏–∑ –≤–∏–¥–µ–æ.';
	ctext += '\n"**+ <–Ω–∞–∑–≤–∞–Ω–∏–µ>**" ‚Äï –∏—â–µ—Ç –≤ YouTube, –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ.';
	ctext += '\n"**? <–Ω–∞–∑–≤–∞–Ω–∏–µ>**" ‚Äï –∏—â–µ—Ç –≤ YouTube, —Ä–∞–Ω–¥–æ–º–Ω–æ —Å 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞.';
	ctext += '\n"**-**" ‚Äï –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Ç–æ–≥–æ, —á—Ç–æ —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç.';
	ctext += '\n"**@**" ‚Äï –ø—Ä–æ–±–Ω—ã–π –∑–∞—Ö–æ–¥ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª, just 4 test.';
	
	//ctext = '```\n' + ctext + '\n```';
	
	musicRetext(cmus, ctext);
}

function musicRetext(cmus, ctext) {
	if (cmus.stat && cmus.stat.then) {
		cmus.stat.then(message => {
			return cmus.stat.edit(ctext);
		}).catch(console.error);
		return;
	}
	
	if (cmus.stat) {
		return cmus.stat = cmus.stat.edit(ctext);
	} else {
		return cmus.stat = cmus.tch.sendMessage(ctext).then(message => {
			return cmus.stat = message;
		}).catch(console.error);
	}
}

function musicRemember(cmus) {
	
}

function musicStop(cmus) {
	try {
		if (cmus.c) {
			if (cmus.e) {
				cmus.e.stop();
				cmus.e.destroy();
				cmus.e = null;
			}
			cmus.c = null;
			cmus.curr = null;
			cmus.list = [];
			cmus.skip = [];
			cmus.vch.leave();
			musicUpdate(cmus);
		}
	} catch(e) {
		console.error(e);
	}
}
