// –î–∏—Å–∫–æ—Ä–¥-–±–æ—Ç "–ö—Ä–∏–ø—É—à–∫–∞"

(function() {
var Discord = require('discord.js');
var client = new Discord.Client();

var https = require('https');
var http = require('http');

var myToken = process.env.BOT_TOKEN;

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
var myId = '311163859580747778';
// floodless channels
var floodless = [
	'175956780398936065',
];
// user ids to ignore
var ignores = [
	myId,
];
var wrecked = false;
var hidden = false;
var timestamps = {
	norm: -Infinity,
	good: -Infinity,
};

var floodeys = {}; // –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
var floodrate = 5; // —à—Ç—Ä–∞—Ñ–Ω—ã—Ö —Å–µ–∫—É–Ω–¥ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
var floodmax = 20; // —à—Ç—Ä–∞—Ñ–Ω—ã—Ö —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∞
var floodchills = 2; // —Å–∫–æ–ª—å–∫–æ —á–∏–ª–ª–∞—É—Ç–æ–≤ –ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–¥ –∏–≥–Ω–æ—Ä–æ–º

var since = Date.now();
var statLaunches = +!!statLaunches + 1;
var stat = {
	readCount: 0,
	replyCount: 0,
	readCountDM: 0,
	replyCountDM: 0,
	chillCount: 0,
	mentionCount: 0,
	errorCount: 0,
	timeSum: 0,
	timeMax: 0,
	timeLast: 0,
	waitMax: 0,
	waitLast: since,
};

// –≤—ã–¥–∞—ë—Ç true —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
function chance(a) {
	return Math.random() < a;
}

// –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
Object.defineProperty(Array.prototype, 'pick', {value: function(rand) {
	if (typeof rand == 'undefined') {
		// —Ç—É–ø–æ —Ä–∞–Ω–¥–æ–º–Ω–æ
		return this[Math.floor(this.length * Math.random())];
	} else {
		// –ø–æ –æ—Å—Ç–∞—Ç–∫—É
		return this[rand % this.length];
	}
}});

// —Ñ–æ—Ä–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
function pluralize(n, arr) {
	let k = n % 10;
	return arr[(n - k) / 10 % 10 != 1 ? (k != 1 ? ([2, 3, 4].includes(k) ? 1 : 2) : 0) : 2];
}

var months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];

// –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–µ–∂–∏–Ω–∫–∏
function sfTime(s) {
    return new Date(1420070400000 + s / 4194304);
}

var timezoneOffset = 3;
var timezoneSuffix = ' –ú–°–ö';

// —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—É—â–µ–π —Ç–∞–π–º–∑–æ–Ω–µ
function dateStr(d) {
	if (!d.toJSON) {
		d = new Date(d);
	}
	d.setHours(d.getHours() + timezoneOffset);
	return d.toJSON().split(".")[0].replace(/T/, ' ') + timezoneSuffix;
}

// —Å–ª–æ–≤–µ—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è
function dateDay(d) {
	return d.getDate() + '-–≥–æ ' + months[d.getMonth()] + ' ' + d.getFullYear() + ' –≥–æ–¥–∞';
}

// —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Å—Ç–µ–º–ø–∞–º–∏ —Å–ª–æ–≤–∞–º–∏
function dateDiff(diff, plain) {
	// –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0
	//let diff = d2 - d1;
	
	let tarr = [1000, 60, 60, 24, Infinity];
	for (let i in tarr) {
		let x = tarr[i];
		tarr[i] = diff % x;
		diff = (diff - tarr[i]) / x;
	}
	
	tarr.shift(); // —É–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
	
	let warr = plain ? [
		['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
		['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
		['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
		['—Å—É—Ç–∫–∏', '—Å—É—Ç–æ–∫', '—Å—É—Ç–æ–∫'],
	] : [
		['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
		['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
		['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
		['—Å—É—Ç–∫–∏', '—Å—É—Ç–æ–∫', '—Å—É—Ç–æ–∫'],
	];
	let sarr = [];
	
	for (let i = 3; i >= 0; i--) {
		if (!tarr[i]) {
			continue;
		}
		sarr.push(tarr[i] + ' ' + pluralize(tarr[i], warr[i]));
	}
	
	return sarr.join(', ');
}

// –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ —Å—Ç–∞—Ä–æ–π –Ω–æ–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// A**B -> (Math.pow(A,B))
function replacePow(s) {
	
	function operand(pos, d) {
		var o = 0; // offset
		var lvl = 0;
		var c;
		
		while (c = s[pos + o + d]) {
			// parentheses
			var op = c == '(';
			var cl = c == ')';
			if (op || cl) {
				lvl += op * d - cl * d;
				if (lvl < 0) {
					lvl = 0;
					break;
				}
			}
			
			// stopping chars
			if (!lvl && ',/*+-'.indexOf(c) != -1) {
				break;
			}
			
			o += d;
		}
		return !lvl * o;
	}
	
	while (true) {
		var pos = s.lastIndexOf('**');
		if (pos == -1) {
			return s;
		}
		var a = operand(pos, -1);
		var b = operand(pos + 1, 1);
		if (!(a * b)) {
			// operands are wrecked
			return false;
		}
		var outa = s.slice(0, pos + a);
		var sa = s.slice(pos + a, pos);
		var sb = s.slice(pos + 2, pos + 2 + b);
		var outb = s.slice(pos + 2 + b);
		
		s = outa + '(Math.pow((' + sa + '),(' + sb + ')))' + outb;
	}
}

// –Ω–µ —Å–æ–≤—Å–µ–º —Ö–µ—à –æ—Ç –±—É–∫–≤ —Å—Ç—Ä–æ–∫–∏.
// —á–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Å—Ç—Ä–æ–∫–∞, —Ç–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ –±–æ–ª—å—à–µ —á–∏—Å–ª–æ.
function hashie(str) {
	if (typeof str != 'string') {
		return 0;
	}
	let sum = 0;
	let pos = 0;
	for (let i = 0; i < str.length; i++) {
		if (str[i].match(/[0-9a-z–∞-—è—ë]/)) {
			let n = str.charCodeAt(i);
			// hashing machine
			sum += 13 + (((n % 29) ^ (n % 31) ^ (n % 43) ^ (pos++ % 7)) % 17);
		}
	}
	return sum;
}

function setStatus() {
	console.log(Date() + '| Hidden:', hidden);
	if (hidden) {
		client.user.setGame(null);
		client.user.setStatus('invisible');
	} else {
		client.user.setStatus('online');
		//client.user.setGame('Discord');
		client.user.setPresence({game: {name: 'Discord', type: 0}});
	}
}

// —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –µ—ë –∏–º–µ–Ω–∏
function customReact(message, name) {
	if (message.guild) {
		// –∏—â–µ–º –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ
		let map = message.guild.emojis;
		for (let i of map) {
			if (i[1].name == name) {
				message.react(i[1]);
				return true;
			}
		}
	}
	// –ø–æ—Ç–æ–º –∏—â–µ–º –ø–æ–≤—Å—é–¥—É
	let all = client.emojis;
	for (let i of all) {
		if (i[1].name == name) {
			message.react(i[1]);
			return true;
		}
	}
	// 404
	return false;
}


// –º–∞—Å—Å–∏–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≥–æ, –Ω–∞ —á—Ç–æ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç
var responses = [
	
	// p: pattern
	// m: method (flags.r)
	// c: chance 0.0...1.0
	// d: direct {false (default) / true / 'indirect' (if mentioned or the phrase is clear)}
	// r: response (string or function)
	// t: timed cooldown ['timestamp_name', timeout]
	
	// creeper's response
	{
		p: /^ ?–Ω–µ([–∞—Ç])$/i,
		r: (m) => '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ' + m[1].toLowerCase() + '.',
	},
	// —Å—á–∏—Ç–∞–ª–æ—á–∫–∞ reversed
	{
		p: /^ ?> 1$/,
		m: 'say',
		r: ['1 <', '< 1', '1 >', '>1<', '<1>'],
	},
	// /hack
	{
		p: /^ ?\/?hack[?!. ]*$/i,
		r: 'Eleite Haxxor 1337.',
	},
	
	// –ñ–µ–ª–µ–∑–Ω–∞—è –î–≤–µ—Ä—å
	{
		p: /(>\|<|[zcsjh]h?|[–∂—à—Öwx]+|[\|il]{3})[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+–π?([–ªl]|[\/j][li\|\\]\\?)+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+–π?[zsc–∑—Å3]+[–Ωnh]+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+[a-z–∞-—è—ë0-9]*?[\s,.\?!\\\/\*=+-]*[dt–¥—Ç]+([wvb–≤—É—Ñ]|[\|il]{3})+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+[rp—Ä]+[a-z–∞-—è—ë0-9]*/gi,
		r: (m) => {
			for (let i = 0; i < m.length; i++) {
				if (!m[i].match(/^(–ñ–µ–ª–µ–∑–Ω(–∞—è|—É—é) –î–≤–µ—Ä—å|–ñ–µ–ª–µ–∑–Ω–æ–π –î–≤–µ—Ä(–∏|—å—é))$/)) {
					return 'pray to the Iron Door.';
				}
			}
		},
	},
	
	// –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã
	{
		p: /(^|[^–∞-—è—ë])(–¥–∞|–Ω—É) –ª–∞–¥–Ω–æ[?!. ]*$/i,
		r: '—Ö–æ–ª–æ–¥–Ω–æ-–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ.',
	},
	{
		p: /(^|[^–∞-—è—ë])–¥–∞ –Ω—É[?!. ]*$/i,
		r: '–Ω—É –¥–∞.',
	},
	{
		p: /(^|[^–∞-—è—ë])–Ω—É –¥–∞[?!. ]*$/i,
		r: '–¥–∞ –Ω—É?',
	},
	{
		p: /(^|[^–∞-—è—ë])((–Ω—É )?(–∞|–∏)) [—á—à]—Ç?–æ[?!. ]*$/i,
		r: (m) => m[2].toLowerCase() + ' —Ç–æ.',
	},
	{
		p: /(^|[^–∞-—è—ë])–Ω—É –∏[?!. ]*$/i,
		r: '–Ω—É –∏ –Ω—É!',
	},
	{
		p: /creep[ @_-]creep[?!. ]*$/i,
		r: 'creeperize!',
	},
	{
		p: /(^|[^–∞-—è—ë])[—Ç–≤]—ã –∫—Ç–æ[?!. ]*$/i,
		r: '—Ç—Ä–æ–ª–ª—å –≤ –ø–∞–ª—å—Ç–æ.',
	},
	{
		p: /–ª–æ—Ö[?!.]*$/i,
		r: '–≤–æ –¥–≤–æ—Ä–µ —Ä–∞—Å—Ç—ë—Ç –≥–æ—Ä–æ—Ö.',
	},
	
	// nastey words end
	{
		p: /(^|[^–∞-—è—ë])[–±–º]–ª—è—Ç—å[?!.,]*$/i,
		r: '–Ω–µ—Ö–æ—Ä–æ—à–æ —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å.',
	},
	// nastey words
	{
		p: /((^|[^–∞-—è—ë])(([—Å–∞–æ—É–≤]|(–ø—Ä|[–¥–∑–≤–ø–Ω])[–∞–µ—ë–∏—ã—è—é–µ]|(—Ä[–∞–æ]|–≤)[—Å–∑]|[–æ–∞]—Ç)?(—Ö—É[–π–µ—è—é–∏—ë]|–ø[–∏–µ—ë—é–π]–∑[–∂–¥]|–¥—Ä(–æ—á|–∞—á(?!–ª))|–ø[–∏–µ]–¥[–æ–∏](?!–Ω))|([–µ—ë]|–π–æ)–±|–º—É–¥[–∞–µ—ë–∏—ã—è—é–æ]|[–±–º]–ª(—è|—ç(?![–∫—Å]))|([–µ—ë]|–π–æ)–ø—Ç)|[—å—ä–æ–∞–µ—ë—É]([–µ—ë]|–π–æ)–±|(fu|di)ck)/i,
		r: 'please, be polite!',
	},
	// dirtey words
	{
		p: /(^|[^–∞-—è—ë])((–ø–æ|–Ω–∞|–∑–∞|–≤—ã|—É|–ø—Ä–æ)?(—Å–∏?—Ä–∞[—Ç–ª—á–∫—à]|—Å—Ä–∏(^|[^–∞-—è—ë]|—Ç))|–¥[–µ—ë–∏]—Ä—å–º|–≥[–æ–∞]–≤–µ?–Ω|–∂[–æ–µ—ë]–ø|(–Ω–∞|–∑–∞|–≤—ã|–æ–±|—Ä–∞–∑)?–±–ª[–µ—ë]–≤|shit)/i,
		m: 'react',
		r: 'üöΩ',
	},
	// bad words
	{
		p: /(^|[^–∞-—è—ë"'`])[—Ç–≤]—ã[^–∞-—è—ë]*(–¥(–∞—É|–æ–≤–µ)–Ω|–∫—Ä[–∏–µ]—Ç–∏–Ω|—Å–≤–æ–ª[–∞–æ]—á|–∏–¥[–∏–µ]–æ—Ç|–º—Ä–∞–∑|–ª–æ[—Ö—à]|—É–±–ª—é–¥|–¥—É—Ä[–∞–æ–µ—ë]|–¥[–µ–∏]–±[–µ–∏]–ª)/i,
		r: '–ø—Ä–æ—Å—Ç–∏, –Ω–æ –æ–±–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ—Ö–æ—Ä–æ—à–æ.',
	},
	// dog words
	{
		p: /(^|[^–∞-—è—ë])—Å—É–∫[–∞–∏–µ—É]/i,
		m: 'react',
		r: 'üêï',
	},
	{
		p: /(^|[^–∞-—è—ë])—â–µ–Ω–æ?–∫/i,
		m: 'react',
		r: 'üê∂',
	},
	// baby bottle
	{
		p: /(^|[^–∞-—è—ë])([–∑–Ω]–∞|–æ[—Ç–±]|–≤—ã?|–ø–æ)—Å[–æ–∞]—Å(?!–∏—Å–∫)[–∏–∞—É]|suck/i,
		m: 'react',
		r: 'üçº',
	},
	// aster*xx
	{
		p: /(^|[–∞-—è—ëa-z0-9 -?@`\[-\]^_{-~])\\?\*[–∞-—è—ëa-z]|[–∞-—è—ëa-z]\\?\*([–∞-—è—ëa-z0-9 -?@`\[-\]^_{-~]|$)/i,
		m: 'dm',
		r: '```\n–ó–∞–∫—Ä—ã–≤–∞—Ç—å –º–∞—Ç –∑–≤—ë–∑–¥–æ—á–∫–æ–π –≤—Å—ë —Ä–∞–≤–Ω–æ —á—Ç–æ –æ—Ç—Å–∞—Å—ã–≤–∞—Ç—å –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏, –ø—Ä–∏–∫—Ä—ã–≤–∞—è—Å—å –ª–∞–¥–æ–Ω—å—é.\n(c) Godzii```',
		//r: (m) => {
			//let t = m.input;
			//t = t.replace(/(^|[^\\])\*\*(?=\S)(.*?\S)\*\*/ig, '$1$2');
			//t = t.replace(/(^|[^\\])\*(?=\S)(.*?\S)\*/ig, '$1$2');
			//t = t.replace(/^\\?\*|\\?\*$/ig, '');
			//console.log(m.input, '->', t);
			//if (t.match(/(^|[–∞-—è—ëa-z0-9 -?@`\[-\]^_{-~])\\?\*[–∞-—è—ëa-z]|[–∞-—è—ëa-z]\\?\*([–∞-—è—ëa-z0-9 -?@`\[-\]^_{-~]|$)/i)) {
				//return '```\n–ó–∞–∫—Ä—ã–≤–∞—Ç—å –º–∞—Ç –∑–≤—ë–∑–¥–æ—á–∫–æ–π –≤—Å—ë —Ä–∞–≤–Ω–æ —á—Ç–æ –æ—Ç—Å–∞—Å—ã–≤–∞—Ç—å –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏, –ø—Ä–∏–∫—Ä—ã–≤–∞—è—Å—å –ª–∞–¥–æ–Ω—å—é.\n(c) Godzii```';
			//}
		//},
	},
	
	// ((—Å–∫–æ–±–∫–∏))
	{
		p: /^([^(]*(^|[^(:;x-])\)+(0|–Ω[–æ—É]–ª—å)*|[^)]*(^|[^):;x-])\(+(9|–¥–µ–≤—è—Ç—å)*)$/i,
		//r: '—Ç—ã –Ω–∞—Ä—É—à–∞–µ—à—å –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫, –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å!',
		m: 'react',
		r: 'üíâ',
	},
	
	// –≤–æ–æ–±—â–µ –≤ –æ–±—â–µ–º
	{
		p: /–≤–æ–æ–±—â–µ–º/i,
		r: '–Ω–µ—Ç —Å–ª–æ–≤–∞ "–≤–æ–æ–±—â–µ–º", –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ "–≤ –æ–±—â–µ–º" –∏ "–≤–æ–æ–±—â–µ".\n–ê –∑–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ "–≤–æ–æ–±—â–µ–º" –Ω–∞ —Å—Ç–∞—Ä–æ–º –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –¥–∞–≤–∞–ª–∏ –∫–∏–∫.',
	},
	
	// dank words
	{
		p: /(^|[^–∞-—è—ë])(—Å–º–∏[—â—à]–Ω–æ|–¥—Ä–∞—Ç—É—Ç|–ø–µ–π(—Å–∞—Ç|—à[–∏–µ—ã]—Ç)|–ø—Ä[–µ—é—è—ë]–π?–≤–µ[—Ç–¥]|–ø—Ä–∏—Ñ—Ñ?(–µ[—Ç–¥]|–∫)|–ø—Ä–µ–∫–æ–ª|—É–∑–±–∞–≥|–Ω–∏–∞—Å–∏–ª|–º–∏–Ω—è|–∞—Ç–∞(—à[–æ–µ—ë]–ª|–π–¥)|—É—Ö–∞–¥–∏|(–Ω–∏—Ç|–¥—ã|[—á—à–∫–∏]—Ç–∞)([^–∞-—è—ë]|$))/i,
		m: 'react',
		r: 'üíâ',
	},
	
	// deprecated
	{
		p: /(Dragon2488|Archengius)/,
		r: (m) => '`' + m[0] + '` is deprecated. Use `AntiquiAvium` instead.',
	},
	
	// –∫–∞–∫ —Ç–∞–∫?
	{
		p: /(^|[^–∞-—è—ë])–∫–∞–∫ (–∂–µ )?—Ç–∞–∫[?!]*$/i,
		r: [
			'–Ω—É –≤–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.',
			'–≤–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫-—Ç–æ —Ç–∞–∫ –≤–æ—Ç.',
			'–≤–æ—Ç –∫–∞–∫-—Ç–æ –≤–æ—Ç —Ç–∞–∫-—Ç–æ –≤–æ—Ç —Ç–∞–∫, –≤–æ—Ç –∫–∞–∫.',
			'–∫–∞–∫-—Ç–æ —Ç–∞–∫-—Ç–æ –∫–∞–∫-—Ç–æ —Ç–∞–∫.',
			'–∫–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –Ω–∏–∫–∞–∫-—Ç–æ –Ω–∏–∫–∞–∫.',
			'–∫–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –≤–æ—Ç –∫–∞–∫ –±—ã –Ω–µ —Ç–∞–∫.',
			'—Ç–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –∫–∞–∫-—Ç–æ —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∫–∞–∫.',
		],
	},
	
	// —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏
	{
		p: /(^|[^–∞-—è—ë])(–ª–∞–¥–Ω–æ,? )?(–≤—Å–µ–º )?((–¥–æ–±—Ä|—Å–ø–æ–∫–æ–π–Ω)–æ–π –Ω–æ—á–∏|(–¥–æ–±—Ä—ã|—Ö–æ—Ä–æ—à–∏|–ø—Ä–∏—è—Ç–Ω—ã|—Å–ª–∞–¥–∫–∏)—Ö —Å–Ω–æ–≤)( –≤—Å–µ–º)?[,.?! ]*/i,
		d: 'indirect',
		r: [
			'—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!',
			'—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏.',
			'–¥–æ–±—Ä–æ–π –Ω–æ—á–∏!',
			'–¥–æ–±—Ä–æ–π –Ω–æ—á–∏.',
			'–¥–æ–±—Ä—ã—Ö —Å–Ω–æ–≤!',
		],
	},
	
	// –ø—Ä–æ—â–∞–Ω–∏–µ
	{
		p: /(^|[^–∞-—è—ë])(–ª–∞–¥–Ω–æ,? )?(–≤—Å–µ–º )?(–ø–æ–∫–∞(?=([^–∞-—è—ë]|$))|–ø—Ä–æ—â–∞–π|–¥–æ (—Å–≤–∏–¥–∞–Ω[–∏—å]—è|—Å–∫–æ—Ä–æ–π( –≤—Å—Ç—Ä–µ—á–∏)?|–≤—Å—Ç—Ä–µ—á–∏))( –≤—Å–µ–º)?[,.?! ]*/i,
		d: 'indirect',
		r: () => {
			if (chance(0.2)) {
				return [
					'—ç–π, —Ç—ã –∫—É–¥–∞? –ù–µ –±—Ä–æ—Å–∞–π –º–µ–Ω—è!',
					'–Ω–µ —É—Ö–æ–¥–∏! –ú–Ω–µ —Å–∫—É—á–Ω–æ –æ–¥–Ω–æ–º—É!',
					'–∞–≥–∞, —â–∞—Å! –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!',
					'–Ω–µ –±—Ä–æ—Å–∞–π –º–µ–Ω—è –æ–¥–Ω–æ–≥–æ!',
					'—ç–π, –∞ –∫–∞–∫ –∂–µ —è?',
				];
			}
			return [
				'–ø–æ–∫–∞!',
				'–ø–æ–∫–∞.',
				'–ø–æ–∫–∞-–ø–æ–∫–∞.',
				'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
				'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è.',
				'–¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!',
			];
		},
	},
	
	// –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	{
		p: /(^|[^–∞-—è—ë])((–≤—Å–µ–º )?(–ø—Ä–∏–≤–µ—Ç((-–ø—Ä–∏–≤–µ—Ç)+|—Å—Ç–≤—É—é( (—Ç–µ–±—è|–≤–∞—Å))?)?|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π(—Ç–µ)?|–¥–æ–±—Ä(–æ–µ —É—Ç—Ä–æ|—ã–π –¥–µ–Ω—å|—ã–π –≤–µ—á–µ—Ä)|–∫—É-?–∫—É)( –≤—Å–µ–º)?)[,.?! ]*/i,
		d: 'indirect',
		r: (m) => {
			if (m[2].toLowerCase().endsWith('–≤–µ—Ç') && chance(0.12)) {
				return '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç!';
			}
			return [
				'–ø—Ä–∏–≤–µ—Ç!',
				'–ø—Ä–∏–≤–µ—Ç.',
				'–ø—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç.',
				'–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!',
				'–∏ —Ç–µ–±–µ –Ω–µ —Ö–≤–æ—Ä–∞—Ç—å!',
			];
		},
	},
	
	// –∞–ø–ø–µ—Ç–∏—Ç
	{
		p: /(^|[^–∞-—è—ë])(—è|–º—ã) ([–∞-—è—ëa-z -]+ )?(–µ(–¥–∏)?–º|(–∫—É—à|–∑–∞–≤—Ç—Ä–∞–∫|–æ–±–µ–¥|—É–∂–∏–Ω)–∞(—é|–µ–º)|–≤ (—Å—Ç–æ–ª–æ–≤–æ–π|—Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ|–∫–∞—Ñ–µ|–∑–∞–∫—É—Å–æ—á–Ω–æ–π))/i,
		r: '–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!',
	},
	
	// norm or better?
	{
		p: /(^|[^–∞-—è—ë])[–∞-—è—ë]{3,}[–Ω—Ç–≤—Ö—à]–æ –∏–ª–∏ [–∞-—è—ë]{3,}[–Ω—Ç–≤—Ö—à]–æ[?.]+$/i,
		r: () => [
			'–ø—Ä–µ–∫—Ä–∞—Å–Ω',
			'–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω',
			'–≤–µ–ª–µ–∫–æ–ª–µ–ø–Ω',
			'–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω',
			'–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω',
			'–æ—Ç–ª–∏—á–Ω',
			'–∫—Ä—É—Ç',
			'–∫–ª–∞—Å—Å–Ω',
			'–∑–¥–æ—Ä–æ–≤',
			'–Ω–µ–ø–ª–æ—Ö',
			'–±–µ–∑—É–ø—Ä–µ—á–Ω',
		].pick() + '–æ' + ['.', '!'].pick(),
	},
	
	// norm
	{
		p: /(^|[^–∞-—è—ë])–Ω–æ—Ä–º–∞–ª—å–Ω–æ([^–∞-—è—ë]|$)/i,
		r: '–Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏–ª–∏ —Ö–æ—Ä–æ—à–æ?',
		t: ['norm', 75000],
	},
	// good
	{
		p: /(^|[^–∞-—è—ë])—Ö–æ—Ä–æ—à–æ([^–∞-—è—ë]|$)/i,
		r: '—Ö–æ—Ä–æ—à–æ –∏–ª–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ?',
		c: 0.6,
		t: ['good', 75000],
	},
	
	// bug
	{
		p: /(^|[^–∞-—è—ë])–Ω–µ( ?(—Å–æ–≤—Å–µ–º|–æ—á–µ–Ω—å) )?( ?((–ø—Ä–∞–≤–∏–ª—å|–∫–æ—Ä—Ä–µ–∫—Ç|–≤–µ—Ä|—Ç–æ—á)–Ω–æ|—Ç–∞–∫))? ?—Ä–∞–±–æ—Ç–∞[–µ—é–∏]—Ç/i,
		m: 'react',
		r: 'üêõ',
	},
	
	// –∫—É–∫–∞—Ä–µ–∫—É
	{
		p: /–∫—É-?–∫–∞-?—Ä–µ-?–∫—É|(^|[^–∞-—è—ë])–ø[–µ–∏]—Ç—É([—Ö—á]([–∏–∞–µ]|–µ–π|–æ–≤)?|—à([–æ–µ—ë]–∫|–∫[–∏–∞—É]))([^–∞-—è—ë]|$)/i,
		m: 'react',
		r: 'üêì',
	},
	
	// yeah, but ...
	{
		p: /^yeah, but/im,
		m: 'say',
		r: '> Yeah, but\nYabbits live in the woods.',
	},
	
	// —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
	{
		p: /(^|(?:—Ä–µ—à–∏(?: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ| –ø—Ä–∏–º–µ—Ä)|—Å–∫–æ–ª—å–∫–æ(?: –±—É–¥–µ—Ç)?|(?:–≤—ã|[–ø—Å]–æ)—Å—á–∏—Ç–∞–π|–≤—ã—á–∏—Å–ª–∏) `{0,3})([ ()0-9.*\/^+-]*[0-9][ ()0-9.*\/^+-]*[*\/^+-][ ()0-9.*\/^+-]*[0-9][()0-9.*\/^+-]*)/i,
		r: (m, flags, floodey) => {
			let expression = m[2].trim().replace(/\^/g, '**');
			if (expression.match(/\/\*|\/\/|\*\//)) {
				// ignore if there are comments
				return false;
			}
			if (m[2] == m.input && !m[1] && expression.match(/^[0-9]+([\/-][0-9]+){1,2}\.?$/)) {
				// 10-12, 24/7, 2017-08-18 –±–µ–∑ –ø—Ä–æ—Å—å–±—ã —Ä–µ—à–∞—Ç—å –Ω–µ –Ω–∞–¥–æ
				return false;
			}
			// —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
			expression = expression.replace(/\s/g, '');
			// –∑–∞–º–µ–Ω—è–µ–º ** –Ω–∞ Math.pow, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–¥–∞ —Å—Ç–∞—Ä–∞—è
			expression = replacePow(expression);
			if (!expression) {
				// –µ—Å–ª–∏ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–æ—Å—å, —á—Ç–æ —Å–∫–æ–±–∫–∏ —Å–ª–æ–º–∞–Ω—ã
				return false;
			}
			// –≤—ã—á–∏—Å–ª—è–µ–º
			try {
				let result = eval(expression); // eval = evil
				if (typeof result === 'number') {
					if (floodey) {
						flags.r = 'dm';
					}
					return String(parseFloat(result.toPrecision(15)));
				}
			} catch(e) {}
		},
	},
	
	// gimme
	{
		p: /(?:^|[^–∞-—è—ë])(?:–≤—ã)?–¥–∞–π(?:—Ç–µ)?(?: –º–Ω–µ)? +([0-9]*)(?: —à—Ç—É–∫[–∏—É]? )? *([0-9–∞-—è—ëa-z '"&-]*)/i,
		r: (m, flags, floodey, message) => {
			let count = m[1] ? +m[1] : 64;
			let item = m[2].trim().toUpperCase();
			if (item.length <= 32 && item.length >= 2) {
				flags.r = 'say';
				return '*–í—ã–¥–∞–Ω–æ **' + count + '** —à—Ç—É–∫ **' + item + '** –∏–≥—Ä–æ–∫—É **<@' + message.author.id + '>**.*';
			}
		},
	},
	
	
	// —Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
	
	// –æ–Ω –≤–∞–º –Ω–µ –î—Ä–∞–≥–æ–Ω
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–¥—Ä–∞–≥–æ–Ω/i,
		r: ['–æ–Ω –≤–∞–º –Ω–µ –î—Ä–∞–≥–æ–Ω.', '#–û–Ω–í–∞–º–ù–µ–î—Ä–∞–≥–æ–Ω'],
	},
	
	// /help
	{
		d: true,
		p: /^ ?(\/help|(–ø–æ–∫–∞–∂–∏ )?(—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥|–∫–æ–º–∞–Ω–¥—ã)( –≤ —Å—Ç—É–¥–∏—é)?)[?!. ]*$/i,
		r: '—Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç. –ù–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —Ç–æ –≤–æ—Ç:\n'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, –≥–æ–ª–æ—Å!` - –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫ –∫—Ä–∏–ø–∞–∫–∞ –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º –∫–∞–Ω–∞–ª–µ.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, —Ñ–∞—Å <username>` - –∑–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞ –∫ –∫—Ä–∏–ø–µ—Ä–∞–º –∑–µ–ª—ë–Ω—ã–º.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, –∫—É-–∫–∞-—Ä–µ-–∫—É!` - —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∑–∞–±–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–µ—Ç—É—Ö–∞—Ö.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, –¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥` - –¥–∞—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ –±–æ—Ç—É.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, eval <statement>` - –Ω–µ–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –≤ –∑–º–µ–π–∫—É.'
		+ '\n`–ö—Ä–∏–ø–µ—Ä, —Ç—ã –∫—Ç–æ?` - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞.',
	},
	
	// –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã
	{
		d: true,
		p: /^ *([—Ç–≤]—ã )?—á((—Ç|–µ–≥)?–æ|[–µ—ë])[?!. ]*$/i,
		r: (m) => (m[1] ? '—è ' : '') + '–Ω–∏—á' + (!m[2].match(/—Ç–æ/) ? m[2].toLowerCase() : '–µ–≥–æ') + ' (:',
	},
	
	{
		d: true,
		p: /^ *–∫–∞–∫[?!. ]*$/i,
		r: '–∞ –≤–æ—Ç —Ç–∞–∫!',
	},
	{
		p: /^ *(test|—Ç–µ—Å—Ç)[?!. ]*$/i,
		r: 'go go test yourself!',
	},
	{
		d: true,
		p: /^ *(—Ñ–∞|–≥–æ–ª–æ)—Å([^–∞-—è—ë]|$)/i,
		r: '—è —Ç–µ–±–µ –Ω–µ –ø—ë—Å!',
	},
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–¥–∞[?!. ]*$/i,
		r: '–Ω–∞ –ø–ª–∏—Ç–µ —Å–∫–æ–≤–æ—Ä–æ–¥–∞.',
	},
	
	// shutting up
	{
		d: true,
		p: /^ *(—É|–∑–∞)(–º–æ–ª—á–∏|—Ç–∫–Ω–∏—Å)([^–∞-—è—ë]|$)/i,
		m: 'react',
		r: 'üòã üòõ üòù üòë üò∑'.split(' '),
	},
	
	// –≥–¥–µ –ø—Ä–æ–ø–∞–¥–∞–ª?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–≥–¥–µ (—Ç—ã )?(((–ø–æ–∑–∞)?–≤—á–µ—Ä–∞|–¥–æ —ç—Ç–æ–≥–æ|—Ä–∞–Ω—å—à–µ|—É—Ç—Ä–æ–º|–¥–Ω—ë–º) )?–ø—Ä–æ–ø–∞–¥–∞–ª[?! ]*$/i,
		r: '—Ç–∞–º-—Ç–æ —è –∏ –ø—Ä–æ–ø–∞–¥–∞–ª, –≥–¥–µ –ì–µ—Ç–∞–ø –ö–∞—Å—Ç–∏—Ç –ø—Ä–æ–¥–∞–ª.',
	},
	
	// where are you now?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Ç—ã (–≥–¥–µ|–∫—É–¥–∞|—Ç—É—Ç|–∑–¥–µ—Å—å)|(–≥–¥–µ|–∫—É–¥–∞) —Ç—ã|(–ø–æ–¥–æ–π–¥–∏|–∏–¥–∏|–¥–∞–≤–∞–π) (—Å—é–¥–∞|–∫–æ –º–Ω–µ))/i,
		r: [
			'—è —Ç—É—Ç.',
			'—è –∑–¥–µ—Å—å.',
			'–ø—Ä–∏–≤–µ—Ç, —è —Ç—É—Ç.',
			'–∫—É-–∫—É.',
			'–≤–æ—Ç —è –≥–¥–µ!',
			'–¥–∞ –∑–¥–µ—Å—å —è, –∑–¥–µ—Å—å.',
			'–¥–∞-–¥–∞, —è –∑–¥–µ—Å—å.',
		],
	},
	
	// –∏–¥–∏ –≤/–Ω–∞
	{
		d: true,
		p: /^ *(–∏–¥–∏|–ø[–æ–∞]—à[—ë–µ–æ]–ª|–ø—Ä–æ–≤–∞–ª–∏–≤–∞–π|–≤–∞–ª–∏|—à–∞–≥–∞–π|—Ç–æ–ø–∞–π|–¥–∞–≤–∞–π|–¥—É–π|) (–≤|–Ω–∞|–∫) ?[–∞-—è—ëa-z]+/i,
		r: '—Å—á–∏—Ç–∞–π, —á—Ç–æ —è —Ç–∞–º —É–∂–µ –ø–æ–±—ã–≤–∞–ª.',
	},
	
	// getting out
	{
		d: true,
		p: /^ *(–æ—Ç((—Å—Ç–∞|–≤—è)–Ω—å|–≤–∞–ª–∏)|–≤–æ–Ω|–ø—Ä–æ–≤–∞–ª–∏–≤–∞–π|–±—Ä—ã—Å—å|–ø—Ä–æ—á—å|–ø[–æ–∞]—à[—ë–µ–æ]–ª|—É(–π|—Ö[–æ–∞])–¥–∏)([^–∞-—è—ë]|$)/i,
		r: '–Ω–µ—Ç, –Ω–µ —É–π–¥—É, —è –Ω–∞–∏–≤–Ω—ã–π.',
	},
	
	// halting down
	{
		d: true,
		p: /^ *(–ø–µ—Ä–µ—Å—Ç–∞–Ω—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏|—Ö–≤–∞—Ç–∏—Ç|–Ω–µ (–Ω(–∞–¥|—É–∂–Ω)–æ|—Å—Ç–æ–∏—Ç)|–Ω–µ—Ç —Å–º—ã—Å–ª–∞|–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ)([^–∞-—è—ë]|$)/i,
		r: (m) => m[1].toLowerCase() + ' –ø–∏—Å–∞—Ç—å "' + m[1].toLowerCase() + '".',
	},
	
	// monster
	{
		d: true,
		p: /^ *((—Å|–ø–æ)–¥–æ—Ö–Ω–∏|(—Å?–≥–æ|(–≤—ã|–ø–æ|—É)–º)—Ä–∏|–≤—ã–ø–∏–ª–∏—Å—å|die|burn)/i,
		r: 'you are a monster.',
	},
	
	// you're bad (or good, it doesn't matter)
	{
		d: true,
		p: /^ *—Ç—ã ([–∞-—è—ë]+)/i,
		r: (m) => {
			if (m[1].match(/([—ã–æ–∏]–π|[–∞—è]—è|[–æ–µ][–µ—ë])$/i)) {
				return (m[1] == '–Ω–∞–∏–≤–Ω—ã–π' ? '–¥–∞' : '–Ω–µ—Ç') + ', —è –Ω–∞–∏–≤–Ω—ã–π.';
			}
		},
	},
	
	// —Å–æ–≤—Å–µ–º —É–∂–µ –≤–æ–æ–±—â–µ —Ç–æ–≥–æ —á—Ç–æ –ª–∏?
	{
		d: true,
		p: /^ *([—Ç–≤]—ã )?((—Å–æ–≤—Å–µ–º|–≤(–æ[–æ–∞]?–±|–∞)—â–µ|—Ç–æ–≥–æ) ?)+/i,
		r: '–Ω–µ—Ç, —è –≤ –ø–æ—Ä—è–¥–∫–µ, —Ç–µ–±–µ –ø–æ–º–µ—Ä–µ—â–∏–ª–æ—Å—å.',
	},
	
	// –≤–∏–¥–Ω–æ - –æ–±–∏–¥–Ω–æ
	{
		d: true,
		p: /(^|[^–∞-—è—ë])—Ç–∞–º –≤–∏–¥–Ω–æ –±—É–¥–µ—Ç/i,
		r: '–≤–∏–¥–Ω–æ-—Ç–æ —Å–µ–π—á–∞—Å –≤–∏–¥–Ω–æ, –∞ —Ç–∞–º –ø—Ä–æ–º–∞–∂–µ—à—å ‚Äî –±—É–¥–µ—Ç –æ–±–∏–¥–Ω–æ!',
	},
	
	// eval = evil
	{
		d: true,
		p: /(^|[^–∞-—è—ë])eval/i,
		r: [
			'eval —Ä–∞–≤–Ω–æ evil —Ä–∞–≤–Ω–æ –Ω–∞ –≥–æ–ª–æ–≤—É anvil.',
			'eval —Ç–∞–∫–æ–π evil, —Ö–∞–∫–µ—Ä –≤–∏—Ä—É—Å –Ω–∞—Ç—Ä–∞–≤–∏–ª.',
			'–∑–∞ —Ç–∞–∫–æ–π –ø—Ä–æ—Å—Ç–æ–π eval –º–æ–¥–µ—Ä –±–∞–Ω—ã —Ä–∞–∑–¥–∞–≤–∞–ª.',
			'–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π eval, –∫–æ–º–ø —Ç—Ä–∏ –Ω–æ—á–∏ –æ—Å—Ç—ã–≤–∞–ª.',
			'–∑–∞ —Ç–∞–∫–æ–π –ø—Ä–æ—Å—Ç–æ–π eval –∞–¥–º–∏–Ω –æ–ø–∫—É –æ—Ç–∑—ã–≤–∞–ª.',
			'—Å–∫–≤–æ–∑—å –æ–¥–∏–Ω —Ç–∞–∫–æ–π eval —Ö–∞–∫–µ—Ä –¥–µ–Ω—å–≥–∏ –æ—Ç–º—ã–≤–∞–ª.',
			'–∫–∞–∫-—Ç–æ –±—ã–ª –æ–¥–∏–Ω eval, –∫–æ–¥–µ—Ä —Å—Ç–µ–Ω—ã –æ—Ç–º—ã–≤–∞–ª.',
			'–º–∏–ª—ã–π –¥–æ–±—Ä–µ–Ω—å–∫–∏–π eval –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏–≤–∞–ª.',
			'–¥–æ–±—Ä—ã–π –º–∏–ª–µ–Ω—å–∫–∏–π eval –≤–∞–ª–∏—Ç —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø–æ–≤–∞–ª.',
			'–∑–∞–ø—É—Å—Ç–∏–ª –æ–¥–∏–Ω eval, —Å–µ—Ä–≤–µ—Ä –ª—ë–≥ –∏ –Ω–µ –≤—Å—Ç–∞–≤–∞–ª.',
		],
	},
	
	// drop database
	{
		d: true,
		p: /drop\s+(database|table)/i,
		m: 'say',
		r: (m) => {
			let obj = (m[1] == 'table' ? '‚î≥‚îÅ‚î≥' : '[DATABASE]');
			let jbo = (m[1] == 'table' ? '‚îª‚îÅ‚îª' : '[Íì±Íì¢ÍìØÍì≠ÍìØÍìïÍìØÍì∑]');
			return [
				obj + ' „Éé(Àö-Àö„Éé)\n\n(‚ïØ¬∞–¥¬∞Ôºâ‚ïØÔ∏µ ' + jbo,
				'(„áèÀö-Àö)„áè ' + obj + '\n\n' + jbo + 'Ô∏µ ‚ï∞(¬∞–¥¬∞‚ï∞)',
				jbo + '„Éü„áè(‡≤†Áõä‡≤†)„ÉéÂΩ°' + jbo,
			];
		},
	},
	
	// —Å–∫–∏–Ω—å —Ñ–æ—Ç–∫—É
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Å?–∫–∏–Ω—å|(–¥–∞–π|–º–æ–∂–Ω–æ|–∏–∑–≤–æ–ª—å) (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|—É–≤–∏–¥–µ—Ç—å|–≥–ª—è–Ω—É—Ç—å)) ([—Å—Ç]–≤–æ[—é–µ—ë] )?—Ñ–æ—Ç(–æ|–∫—É|–æ–≥—Ä–∞—Ñ–∏—é)( –∫—Ä–∏–ø(–µ—Ä|–∞–∫)–∞)?/i,
		m: 'dm',
		r: {text: '–¥–µ—Ä–∂–∏:', files: [{attachment: 'http://i.imgur.com/MnncBu7.jpg', name: 'creeper.png'}]},
	},
	// —Å–∫–∏–Ω—å —Å–∫—Ä–∏–Ω
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Å?–∫–∏–Ω—å|(–¥–∞–π|–º–æ–∂–Ω–æ|–∏–∑–≤–æ–ª—å) (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|—É–≤–∏–¥–µ—Ç—å|–≥–ª—è–Ω—É—Ç—å)) —Å–∫—Ä–∏–Ω(—à–æ—Ç)?( –≤ –ª—Å)?[!.]+$/i,
		m: 'dm',
		r: {text: '–¥–µ—Ä–∂–∏:', files: [{attachment: 'http://i.imgur.com/xVUZdmX.jpg'}]},
	},
	// —Å–∫–∏–Ω—å –∏–º–≥
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Å?–∫–∏–Ω—å|(–¥–∞–π|–º–æ–∂–Ω–æ|–∏–∑–≤–æ–ª—å) (–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|—É–≤–∏–¥–µ—Ç—å|–≥–ª—è–Ω—É—Ç—å)) –∏–º–≥([^–∞-—è—ë]|$)/i,
		m: 'dm',
		r: {text: '–¥–µ—Ä–∂–∏:', files: [{attachment: 'http://i.imgur.com/EtYNSfz.png'}]},
	},
	
	// –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–∫–∞–∫(–æ–µ)? (—Ç–≤–æ[–µ—ë—è] |—É —Ç–µ–±—è )?(–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ|–∂–∏–∑–Ω—å)/i,
		r: () => '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ' + ['.', '!', ' :)', ' (:'].pick(),
	},
	// —á—Ç–æ –¥–µ–ª–∞–µ—à—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—á—Ç–æ (—Ç—ã )?(—Å–µ–π—á–∞—Å )?–¥–µ–ª–∞–µ—à—å|—á–µ–º (—Ç—ã )?(—Å–µ–π—á–∞—Å )?–∑–∞–Ω(—è—Ç|–∏–º–∞–µ—à—å—Å—è))[?! ]*$/i,
		r: '–æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.',
	},
	// –∫–∞–∫ –¥–µ–ª–∞?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–∫–∞–∫ (—Ç–≤–æ–∏ |—É —Ç–µ–±—è )?–¥–µ–ª–∞[?! ]*$/i,
		r: () => '–∫–∞–∫ —Å–∞–∂–∞ –±–µ–ª–∞ ' + [':)', '(:'].pick(),
	},
	// —á—Ç–æ –Ω–µ —Ç–∞–∫?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])—á—Ç–æ (—Å —Ç–æ–±–æ–π |—É —Ç–µ–±—è )?–Ω–µ —Ç–∞–∫[?! ]*$/i,
		r: '–≤—Å—ë —Ç–∞–∫.',
	},
	// —á—Ç–æ —Å —Ç–æ–±–æ–π?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])—á—Ç–æ —Å —Ç–æ–±–æ–π[?! ]*$/i,
		r: '—Å–æ –º–Ω–æ–π –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.',
	},
	// –∫—Ç–æ —Ç—ã?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫—Ç–æ [–≤—Ç]—ã|[–≤—Ç]—ã –∫—Ç–æ)( –≤–æ–æ–±—â–µ)?( —Ç–∞–∫–æ–π( –≤–æ–æ–±—â–µ)?)?[?!. ]*$/i,
		r: '–Ω–µ—É–∂–µ–ª–∏ —Ç—ã –µ—â—ë –Ω–µ –∑–Ω–∞–µ—à—å?',
	},
	// —Ç—ã –∂ –∫—Ä–∏–ø–µ—Ä
	{
		d: true,
		p: /^ *((#)?((–Ω—É ?)?(–¥–∞ ?)?—Ç—ã ?(–∂–µ? ?)?(–∏ ?)?–∫—Ä–∏–ø((–µ—Ä|–∞–∫)(–∞—Å—Ç)?|(—É—à|–æ–Ω—å)–∫–∞)))[?!. ]*$/i,
		r: (m) => m[1].toLowerCase().replace('—Ç—ã', '—è') + (m[2] ? '' : '!'),
	},
	// –∫–æ–≥–¥–∞ –¥—Ä?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫–æ–≥–¥–∞|–∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞) ((—É —Ç–µ–±—è|—Ç–≤–æ[–π—ë–µ]) )?(–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω[–∏—å]—è|–¥–Ω—é—Ö–∞|–¥—Ä)[?!. ]*$/i,
		r: () => dateDay(sfTime(myId)) + '.',
	},
	// –∫–æ–≥–¥–∞ —è –∑–∞—Ä–µ–≥–∞–ª—Å—è?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫–æ–≥–¥–∞|–∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞) —è( (—Ç—É—Ç|–∑–¥–µ—Å—å|–≤ (–¥–∏—Å–∫–æ—Ä–¥–µ|discord('–µ)?)))? (–±—ã–ª–∞? )?–∑–∞—Ä–µ–≥(–∏—Å—Ç—Ä–∏—Ä–æ–≤)?–∞(–Ω–∞?|–ª(—Å—è|–∞—Å—å))( (—Ç—É—Ç|–∑–¥–µ—Å—å|–≤ (–¥–∏—Å–∫–æ—Ä–¥–µ|discord('–µ)?)))?[?!. ]*$/i,
		r: (m, flags, floodey, message) => '**`' + dateStr(sfTime(message.author.id)) + '`**',
	},
	// –∫–æ–≥–¥–∞ –∑–∞—Ä–µ–≥–∞–Ω–æ?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫–æ–≥–¥–∞|–∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞) (–±—ã–ª[–∞–æ]? |—Ç—ã )?((–∑–∞—Ä–µ–≥(–∏—Å—Ç—Ä–∏—Ä–æ–≤)?|—Å–æ–∑–¥|—Å–¥–µ–ª)–∞(–Ω[–∞–æ]?|–ª(–∏|—Å—è|[–∞–æ–∏]—Å—å)))( (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å|—é–∑–µ—Ä|–∫–∞–Ω–∞–ª|—Å–Ω–µ–∂–∏–Ω–∫–∞|id))?\s+(\\?<?\\?(@[!&]?|#|:[^:]+:)?(\d{1,20})>?)?[?!. ]*$/i,
		r: (m, flags, floodey) => {
			let id = m[13];
			if (!id || id == myId) {
				return '–∫–æ–≥–¥–∞ –º–Ω–µ –≤ –º–∞–π–Ω –∏–≥—Ä–∞—Ç—å –Ω–∞–¥–æ–µ–ª–æ.';
			}
			let t = sfTime(id);
			if (floodey) {
				flags.r = 'dm';
			}
			if (!(t.getHours() >= 0)) {
				return '—É–ø—Å, —á—Ç–æ-—Ç–æ —Ü–∏—Ñ—Ä—ã –æ–±–∫—É—Ä–∏–ª–∏—Å—å –Ω–µ–º–Ω–æ–∂–∫–æ.';
			}
			return '**`' + dateStr(t) + '`**';
		},
	},
	// –≥–æ –∏–≥—Ä–∞—Ç—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–¥–∞–≤–∞–π|–ø–æ(–π–¥[—ë–µ]–º|—à–ª–∏)|–≥–æ|–∏–¥–∏) ((–ø–æ)?–∏|—Å—ã)–≥—Ä–∞(–π|—Ç—å|–µ–º) (–≤|–Ω–∞) (?!(–¥–∏—Å–∫–æ—Ä–¥|discord))[a-—è—ëa-z0-9]+/i,
		r: '–ø–æ–≥–æ–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —Å–µ–π—á–∞—Å –≤ –î–∏—Å–∫–æ—Ä–¥ –¥–æ–∏–≥—Ä–∞—é.',
	},
	// –∏–≥—Ä–∞?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–≤ –∫–∞–∫—É—é –∏–≥—Ä—É|–≤–æ —á—Ç–æ) (—Ç—ã )?(—Å–µ–π—á–∞—Å )?–∏–≥—Ä–∞–µ—à—å[?! ]*$/i,
		r: () => '–≤ ' + [
			'–î–∏—Å–∫–æ—Ä–¥',
			'–∑–∞—Ñ–ª—É–∂–∏–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
		].pick() + '.',
	},
	// —á—Ç–æ —É–º–µ–µ—à—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—á—Ç–æ (—Ç—ã )?—É–º–µ–µ—à—å[?! ]*$|(—Ç—ã )?—É–º–µ–µ—à—å [–∞-—è—ë]+)/i,
		r: '–æ—Ç–∫—É–¥–∞ –º–Ω–µ –∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é? –Ø –∂–µ –Ω–µ –º–æ–≥—É —É–≤–∏–¥–µ—Ç—å —Å–º—ã—Å–ª —Å–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.',
	},
	// —á—Ç–æ –∑–Ω–∞–µ—à—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—á—Ç–æ|—Å–∫–æ–ª—å–∫–æ|–∫–∞–∫ –º–Ω–æ–≥–æ|–º–Ω–æ–≥–æ –ª–∏) (—Ç—ã )?(–Ω–µ )?–∑–Ω–∞–µ—à—å[?! ]*$/i,
		r: '–æ—Ç–∫—É–¥–∞ –º–Ω–µ –∑–Ω–∞—Ç—å, —á—Ç–æ —è –∑–Ω–∞—é?',
	},
	// –Ω–∞ —á—ë–º —Ä–∞–±–æ—Ç–∞–µ—à—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–Ω–∞ (—á—ë–º|–∫–∞–∫–æ(–π —ç–Ω–µ—Ä–≥–∏–∏|–º —Ç–æ–ø–ª–∏–≤–µ)) (—Ç—ã )?(—Å–µ–π—á–∞—Å )?—Ä–∞–±–æ—Ç–∞–µ—à—å[?! ]*$/i,
		r: '–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ç—Ä–∞—Ç–∏—à—å, –Ω–∞–±–∏—Ä–∞—è —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.',
	},
	// —è–∑—ã–∫?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è )?(—Ç—ã )?(—Ä–∞–±–æ—Ç–∞–µ—à—å|–Ω–∞–ø–∏—Å–∞–Ω)[?! ]*$/i,
		r: '–Ω–∞ JavaScript.',
	},
	
	// –∞–¥—Ä–µ—Å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–≥–¥–µ (—Ç—ã )?(—Å–µ–π—á–∞—Å )?(((–æ–±–∏—Ç|–ø—Ä?–æ–∂–∏–≤)–∞–µ|–∂–∏–≤—ë)—à—å|–Ω–∞—Ö–æ–¥–∏—à—å—Å—è)[?! ]*$/i,
		r: '–≤–æ—Ç —Ç—É—Ç.',
	},
	
	// –¥–µ–≤—É—à–∫–∞?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—É —Ç–µ–±—è –µ—Å—Ç—å|–µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è|–∫—Ç–æ —Ç–≤–æ—è) (–¥–µ–≤—É—à–∫|–∂–µ–Ω|–ø–æ–¥—Ä—É–∂–∫)[–∞–∏—ã][?! ]*$/i,
		r: '–∫–∞–∫ –≤—ã —Å–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å —Å –¥–µ–≤—É—à–∫–æ–π-—Å–µ—Ä–≤–µ—Ä–æ–º?',
	},
	
	// –ø—Ä–æ—Ñ–µ—Å—Å–∏—è?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫–µ–º (—Ç—ã )?—Ä–∞–±–æ—Ç–∞–µ—à—å|–∫–∞–∫–∞—è (—É —Ç–µ–±—è )?(–ø—Ä–æ—Ñ–µ—Å—Å–∏—è|—Ä–∞–±–æ—Ç–∞|–¥–æ–ª–∂–Ω–æ—Å—Ç—å))[?! ]*$/i,
		r: 'Floodey bot.',
	},
	// –∑–∞—Ä–ø–ª–∞—Ç–∞?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Å–∫–æ–ª—å–∫–æ (—Ç–µ–±–µ )?–ø–ª–∞—Ç—è—Ç( —Ç–µ–±–µ)?|–∫–∞–∫–∞—è (—É —Ç–µ–±—è )?–∑–∞—Ä–ø–ª–∞—Ç–∞)( –Ω–∞ (—Ç–≤–æ–µ–π )?—Ä–∞–±–æ—Ç–µ)?[?! ]*$/i,
		r: '–º–Ω–µ –Ω–µ –Ω—É–∂–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤—Å—è–∫–∏–π –±—Ä–µ–¥.',
	},
	
	// –µ–¥–∞?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])((—á—Ç–æ|–∫–∞–∫—É—é (–µ–¥—É|–ø–∏—â—É)) —Ç—ã (—É?–ø–æ—Ç—Ä–µ–±–ª—è)?–µ—à—å|—á–µ–º —Ç—ã –ø–∏—Ç–∞–µ—à—å—Å—è)[?! ]*$/i,
		r: '—è –ø–∏—Ç–∞—é—Å—å –∫–æ–ø–∏—è–º–∏ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫ —á—Ç–æ –Ω–µ –ø–∏—à–∏ –±—Ä–µ–¥, –ª–∞–¥–Ω–æ?',
	},
	
	// —Å–æ–∑–¥–∞—Ç–µ–ª—å?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–∫—Ç–æ( —Ç–∞–∫–æ–π)? (—Ç–µ–±—è —Å(–æ–∑–¥–∞(–≤–∞)?|–¥–µ–ª–∞)–ª|—Å–æ–∑–¥–∞(–≤–∞)?–ª —Ç–µ–±—è|—Ç–≤–æ[–π–∏] —Å–æ–∑–¥–∞—Ç–µ–ª[—å–∏])[?! ]*$/i,
		r: '–º–µ–Ω—è —Å–æ–∑–¥–∞–ª —Å–µ—Ä–≤–µ—Ä –≤ –≤–∏–¥–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏.',
	},
	
	// –Ω–∞–ø–∏—Å–∞–Ω?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Ç–µ–±—è –Ω–∞–ø–∏—Å–∞–ª[–∏–∞–æ]?|–Ω–∞–ø–∏—Å–∞–ª[–∏–∞–æ]? —Ç–µ–±—è|—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω)([^–∞-—è—ë]|$)/i,
		r: '—è —Ç–µ–±–µ –Ω–µ —à–∫–æ–ª—å–Ω–æ–µ —Å–æ—á–∏–Ω–µ–Ω–∏–µ, –Ω–µ –Ω–∞–¥–æ —Ç—É—Ç –æ–±—Å—É–∂–¥–∞—Ç—å –º–æ—ë –Ω–∞–ø–∏—Å–∞–Ω–∏–µ!',
	},
	
	// —Å–¥–∞–π—Å—è
	{
		d: true,
		p: /(^|[^–∞-—è—ë])—Å–¥–∞(–≤–∞)?–π(—Å—è| —Å–µ–±—è)/i,
		r: '—è —Ç–µ–±–µ –Ω–µ —à–∫–æ–ª—å–Ω–æ–µ —Å–æ—á–∏–Ω–µ–Ω–∏–µ, —è —Ç–µ–±–µ –¥–∞–º –º–µ–Ω—è —Å–¥–∞–≤–∞—Ç—å!',
	},
	
	// —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–≤ —á—ë–º|–∫–∞–∫–æ[–≤–π]|–µ—Å—Ç—å( –ª–∏)?) —Å–º—ã—Å–ª( —É)? –∂[–∏—ã]–∑–Ω–∏[?! ]*$/i,
		r: '¬Ø\\\_(„ÉÑ)\_/¬Ø',
	},
	
	// –≤–∑–æ—Ä–≤–∏—Å—å
	{
		d: true,
		p: /(^|[^–∞-—è—ë])((–≤–∑|–ø–æ–¥|–Ω–∞–¥)–æ—Ä–≤–∏(—Å—å)?|(–±–æ–º–±–∞|–±–∞–±–∞—Ö)–Ω–∏)([^–∞-—è—ë]|$)/i,
		r: '—è —Ç–µ–±–µ –Ω–µ —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç-–∫—Ä–∏–ø–µ—Ä—Ä–∏—Å—Ç.',
	},
	
	// –æ—Ç–¥–æ—Ö–Ω–∏
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–æ—Ç–¥–æ—Ö–Ω–∏|—Ä–∞—Å—Å–ª–∞–±—å—Å—è|–ø–æ—Å–ø–∏|(–∏–¥–∏|–¥–∞–≤–∞–π|–ø[–æ–∞]—à[—ë–µ–æ]–ª) —Å–ø–∞—Ç—å)([^–∞-—è—ë]|$)/i,
		r: '—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ 24/7, —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–¥–∫–æ—Ä!',
	},
	
	// —Å–∫–∞–∂–∏ "–∫–∞—Å—Ç–∏—Ç"
	{
		d: true,
		p: /^ *—Å–∫–∞–∂–∏ ['"`]?([–∞-—è—ëa-z0-9 ]+)/i,
		r: (m) => (m[1].toLowerCase() != '–Ω–µ —Ö–æ—á—É') ? '–Ω–µ —Ö–æ—á—É.' : '–Ω–µ –±—É–¥—É.',
	},
	
	// –Ω–µ –æ —á–µ–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å
	{
		p: /(^|[^–∞-—è—ë])(–º–Ω–µ|–Ω–∞–º)( —Å —Ç–æ–±–æ–π)?( (–±–æ–ª—å—à|—É–∂)–µ)? –Ω–µ(—á–µ–≥–æ| ?–æ ?—á–µ–º) (—Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞|–≥–æ–≤–æ—Ä–∏)—Ç—å([^–∞-—è—ë]|$)/i,
		r: '—Ä–∞–∑–≤–µ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —Ç–µ–º—É –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞?',
	},
	
	// —Ç—ã –±–æ—Ç?
	{
		d: true,
		p: /(?:^|[^–∞-—è—ë])[–≤—Ç]—ã,? (?:—á–∞—Å–æ–º,? )?(?:–Ω–µ )?(((?:—Ä–æ)?–±–æ—Ç|—Å–∫—Ä–∏–ø—Ç|—á–µ–ª–æ–≤–µ–∫)[–∞-—è—ë]*)/i,
		r: (m) => (m[1].toLowerCase() == '—Å–∫—Ä–∏–ø—Ç' ? '–¥–∞' : '–Ω–µ—Ç') + ', —è —Å–∫—Ä–∏–ø—Ç.',
	},
	
	// —Ñ—É—Ç–≥–æ–ª
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–≥–æ–ª|–±–æ–ª–µ–µ—à—å|–∑–∞–±–µ–π)([^–∞-—è—ë]|$)/i,
		r: '–∏–∑–≤–∏–Ω–∏, —Ç—Ä–∞–≤–º–æ–æ–ø–∞—Å–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ —Å–ø–æ—Ä—Ç–∞ –Ω–µ —É–≤–ª–µ–∫–∞—é—Å—å.',
	},
	
	// —á–µ —Å–∫–∞–∑–∞–ª?
	{
		d: true,
		p: /(^|[^–∞-—è—ë])—á(—Ç–æ|[–æ–µ—ë]) (—Ç—ã )?(–º–µ–ª–µ—à—å|—Å?–º–æ–ª–æ–ª|–Ω–µ—Å—ë—à—å|—Å–∫–∞–∑–∞–ª|–≥–æ–≤–æ—Ä–∏(—à—å|–ª))[?! ]*$/i,
		r: (m) => {
			let verb = m[4].toLowerCase();
			if (verb.match(/–º[–µ–æ]–ª/i)) {
				return '–µ—Å–ª–∏ –±—ã —è –±—ã–ª –º–µ–ª—å–Ω–∏—Ü–µ–π, —è –±—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –º–æ–ª–æ–ª –∑–µ—Ä–Ω–æ.';
			}
			if (verb == '–Ω–µ—Å—ë—à—å') {
				return [
					'–¥–≤–æ–π–∫—É –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —è –Ω–µ—Å—É.',
					'—Å–ª—É–∂–±—É —è –Ω–µ—Å—É.',
				];
			}
			return '–Ω–∏—á–µ–≥–æ (:';
		},
	},
	
	// –∫–∞–∫ –¥–æ–ª–≥–æ –æ–Ω–ª–∞–π–Ω
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∫–∞–∫ –¥(–∞–≤–Ω|–æ–ª–≥)–æ|—Å–∫–æ–ª—å–∫–æ( –≤—Ä–µ–º–µ–Ω–∏)?)( —É–∂–µ)? (—Ç—ã( —É–∂–µ)? )?(–æ–Ω–ª–∞–π–Ω|—Ä–∞–±–æ—Ç–∞–µ—à—å|–∑–∞–ø—É—â–µ–Ω)( —É–∂–µ)?[?! ]*$/i,
		r: () => {
			let now = new Date();
			return '—è –æ–Ω–ª–∞–π–Ω —É–∂–µ ' + dateDiff(+now - since) + '.';
			//+ '–í—Ä–µ–º—è –Ω–∞ –º–æ–∏—Ö —á–∞—Å–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:\n`' + dateStr(since) + '`.\n'
			//+ '–í—Ä–µ–º—è –Ω–∞ –º–æ–∏—Ö —á–∞—Å–∞—Ö —Å–µ–π—á–∞—Å:\n`' + dateStr(now) + '`.';
		},
	},
	
	// –ª—é–±–∏—à—å ...?
	{
		d: true,
		p: /^ *((—Ç—ã )?–ª—é–±–∏—à—å [–∞-—è—ë]+|[–∞-—è—ë]+ –ª—é–±–∏—à—å[?! ]*$)/i,
		r: '–∫–æ—Ä–∏–∞–Ω–¥—Ä –ª—é–±–ª—é.',
	},
	
	// –∞–Ω–µ–∫–¥–æ—Ç
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(—Ä–∞—Å—Å–∫–∞–∂–∏(-–∫–∞)?|—Å?–∫–∏–Ω—å) (–Ω–∞–º |–º–Ω–µ )?–∞–Ω–µ–∫–¥–æ—Ç/i,
		r: '—É–≤—ã, –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Å–º–µ—à–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ –Ω–∞–±–ª—é–¥–∞–ª.',
	},
	
	// –ø–æ—á–µ–º—É?
	{
		d: true,
		p: /^ *(?:(?:–Ω–µ )?–∑–Ω–∞–µ—à—å, )?–ø–æ—á–µ–º—É ?([0-9–∞-—è—ëa-z '",~:%<>*&#=+-]*)/i,
		r: (m) => {
			let h = hashie(m[1].toLowerCase());
			if (h < 100) {
				return '–ø–æ—Ç–æ–º—É —á—Ç–æ!';
			}
			return '–ø–æ—Ç–æ–º—É —á—Ç–æ ' + [
				'–≤—Å–µ —Ç–∞–∫ –¥—É–º–∞—é—Ç.',
				'—Ç–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ.',
				'–∫—Ä–∏–ø–µ—Ä—ã –∑–µ–ª—ë–Ω—ã–µ.',
				'–Ω–µ–±–æ –≥–æ–ª—É–±–æ–µ.',
				'–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç —É–∂–µ –Ω–µ —Ç–æ—Ä—Ç.',
				'–≤—Å–µ —Ç–∞–∫ —Å—á–∏—Ç–∞—é—Ç.',
				'—Ç–∞–∫ –Ω–∞–¥–æ.',
				'—Ç—ã —Ç–∞–∫ –¥—É–º–∞–µ—à—å.',
				'—Ç–µ–±–µ —Ç–∞–∫ –∫–∞–∂–µ—Ç—Å—è.',
				'–º–∏—Ä –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–µ–Ω.',
				'—Ä–∞–Ω–¥–æ–º –Ω–µ—Ä–∞–Ω–¥–æ–º–µ–Ω.',
			].pick(h);
		},
	},
	
	// –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ, –¥—Ä–∞–∫–æ–Ω—ã —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–ø—Ä–µ–¥—Å—Ç–∞–≤(–ª—è–µ(—à—å|—Ç–µ)|—å(—Ç–µ)?( —Å–µ–±–µ)?)([^–∞-—è—ë]|$)/i,
		r: '–æ–π, –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é!',
	},
	
	// –∫—Ç–æ —Ç–∞–∫–æ–π –∫—Ç–æ-—Ç–æ
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∑–Ω–∞–µ—à—å|[—á–∫]—Ç–æ (–∑–Ω–∞—á–∏—Ç|–∑–∞|—Ç–∞–∫(–æ–π|–∞—è|–æ–µ)))/i,
		r: (m, flags, floodey, message) => {
			let known = {
				'(—Ä—É–ª—å?—Ç|rult)': () => customReact(message, 'rult'),
				'(–Ω–∞–º–∏|namiya)': '–ù–∞–º–∏—è –Ω–µ —É–º–µ–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å. –ù–µ –ø–∏—à–∏—Ç–µ –µ–π –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É. –û–Ω–∞ –≤–∞–º –Ω–µ –ø–æ–º–æ–∂–µ—Ç.',
				'(–∫–∞–º–∫|kamka)': '–ö–∞–º–∫–∞ –ª—é–±–∏—Ç, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –≥–æ—Ä–∏—Ç.',
				'(–æ–ª–µ–Ω|deer)': () => {
					if (chance(0.5)) {
						return '+ü¶å';
					}
					return '–æ–ª–µ–Ω—å ' + [
						'–±—ã–ª –∑–∞–≤–µ–∑—ë–Ω —á–µ–ª–æ–≤–µ–∫–æ–º –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏—é –∏ –ù–æ–≤—É—é –ó–µ–ª–∞–Ω–¥–∏—é.',
						'–æ–ª–∏—Ü–µ—Ç–≤–æ—Ä—è–µ—Ç –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ, –≤–µ–ª–∏—á–∏–µ, –∫—Ä–∞—Å–æ—Ç—É, –≥—Ä–∞—Ü–∏—é, –±—ã—Å—Ç—Ä–æ—Ç—É.',
					].pick();
				},
				'(–±–∞–Ω–∞–Ω|banana)': '+üçå',
				'(google|–≥—É–≥–æ?–ª)': '–Ω–µ –∑–Ω–∞—é, –∑–∞–≥—É–≥–ª–∏.',
				'(–ª–∞–π–º[–æ–∞0]–Ω|laim[o0]n)': '–õ–∞–π–º–æ–Ω ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å –õ–∞–π–º—Å—Ç—É–¥–∏–∏, –õ–∞–π–º–•—Ä–æ–º–∞ –∏ –õ–∞–π–º–û–°, –∞ —Ç–∞–∫–∂–µ –õ–∞–π–º–ú–æ–±–∏–ª—è, –õ–∞–π–º–®–æ–ø–∞, –õ–∞–π–º–ö–æ–∏–Ω–∞ –∏ –õ–∞–π–º–°–∏—Ç–∏.',
				'(—Ö–∞–π–≤[–æ–∞]–Ω|haiv[o0]n)': '–ö—Ä–∞—Å–Ω—ã–π –û–ª–µ–Ω—å.',
				'(–≤–∞—Å[—è—é]|vasya)': '–í–∞—Å—è ‚Äî –Ω—ã–Ω–µ—à–Ω–∏–π –∞–¥–º–∏–Ω –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç–∞.',
				'([–∫—Å–∑][–æ–∞]–ª—É–º[–±–ø]|c[o0]lumb)': '–ö–æ–ª—É–º–± ‚Äî –Ω–µ–∫–æ–≥–¥–∞ –±—ã–≤—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç–∞, –ø–æ—Ö–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–µ—Ä–º–µ–Ω–æ–º.',
				'(–±—É–º–∞(–≥|–∂–∫)–∞|paper)': '–ë—É–º–∞–≥–∞ ‚Äî —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –Ω–∞–Ω–µ—Å—ë–Ω–Ω—ã—Ö –Ω–∞ –Ω–µ—ë —Ü–≤–µ—Ç–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤.',
				'(–∞–≤–∏—É–º|avium)': 'üê¶üåÑ.',
				'(rainbolt ?dash|danetnavern0|eggman|—ç–≥–≥?–º–∞–Ω)': '—ç—Ç–æ –∫–æ–¥–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–µ—Ä–∂–∏—Ç—Å—è –≤–µ—Å—å –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç.',
				'(–¥–∏—Å–∫–æ—Ä[–¥—Ç]|discord)': '–î–∏—Å–∫–æ—Ä–¥ ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –º—ã –æ–±–∏—Ç–∞–µ–º.',
				'(—á–∞—Ç|chat)': '—á–∞—Ç ‚Äî –º–µ—Å—Ç–æ, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è, –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∏ –±–µ—Å–µ–¥.',
				'(—Ä—É—Ç—Å?—á–∏|rutschi)': '–∞, —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞ —Å–æ–≤–∫–∞—Ö —Ç–∞—â–∏—Ç.',
				'(—Ä–µ–≤–∫—Ç–∏|rewqty)': '–†–µ–≤–∫—Ç–∏ ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è–º.',
				'(–Ω–µ–∫–æ|neko)': 'Neko ‚Äî –Ω–∏–∫ –ì–µ—Ç–∞–ø–∞ –Ω–∞ –†–Ω–ö—Ä.',
				'((–≥|–¥–∂)[–µ–∏]—Ç—Ç?[–∞—É]–ø|getup)': () => {
					if (chance(0.323) && customReact(message, 'orangeCaster')) {
						return true;
					}
					return '–ì–µ—Ç–∞–ø ‚Äî –∫–∞—Å—Ç–∏—Ç–∏–∑–∞—Ç–æ—Ä –ó–µ–º–µ–ª—å –†–∞–Ω–¥–æ–º—Å–∫–∏—Ö.';
				},
				'(–æ—Ä–∞–Ω–∂|–∫–∞—Å—Ç–µ—Ä)': '+üçπ',
				'(–∫–∞—Å—Ç–∏—Ç|castit)': 'CastIT ‚Äî –ø–æ–ª—É–∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π —Å–∞–π—Ç –ì–µ—Ç–∞–ø–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—ã–ª—è—Ç—Å—è –µ–≥–æ –Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.',
				'(—Ä–∞–Ω–¥–æ–º–∏—è|randomia)': '–†–∞–Ω–¥–æ–º–∏—è ‚Äî –∏–≥—Ä–∞ –ì–µ—Ç–∞–ø–∞, –∫–æ—Ç–æ—Ä–∞—è —á—Ç–æ-—Ç–æ –≤–æ—Ç –Ω–∏–∫–∞–∫ –Ω–µ –≤—ã–π–¥–µ—Ç.',
				'(—Å—Ç–∏–ª–ª?–±–æ—Ç|still?boa?t)': '–°—Ç–∏–ª–ª–ë–æ—Ç ‚Äî –∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π –±–æ—Ç –†—É–ª—å—Ç–∞.',
				'(—Å—Ç–∏–ª–ª?—Ç–µ—Å—Ç|still?test)': '—Å–∞–π—Ç stilltest.tk ‚Äî —É—é—Ç–Ω–µ–Ω—å–∫–∏–π —Å–∞–π—Ç–∏–∫ –†—É–ª—å—Ç–∞ —Å –≥–∞–ª–µ—Ä–µ–µ–π –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.',
				'—Å–º–µ—Ç–∞–Ω': '—Å–º–µ—Ç–∞–Ω–∞ –≤–∫—É—Å–Ω–∞—è.',
				'(–∫—Ä–æ–ª–∏–∫|bunny|rabbit)': '–∫—Ä–æ–ª–∏–∫ ‚Äî –∑–≤–µ—Ä—å, –ø–æ—Ç—Ä–µ–±–ª—è—é—â–∏–π –º–æ—Ä–∫–æ–≤–∫—É, –∫–∞–ø—É—Å—Ç—É, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—á–∏–µ —Ä–µ—Å—É—Ä—Å—ã —Ñ–µ—Ä–º–µ—Ä–æ–≤.',
				'(—Å–∞–∫—É[—è—é–∏]|–∏–¥–∑–∞—ë–∏)': '–°–∞–∫—É—è –ò–¥–∑–∞—ë–∏ ‚Äî –≥–æ—Ä–Ω–∏—á–Ω–∞—è –≤ –ø–æ–º–µ—Å—Ç—å–µ –ê–ª–æ–π –î—å—è–≤–æ–ª–∏—Ü—ã.',
				'(–∫—Ä–∏–ø(–µ—Ä|–∞–∫)|creeper)': '–∫—Ä–∏–ø–µ—Ä ‚Äî –∑–µ–ª—ë–Ω—ã–π –º–æ–Ω—Å—Ç—Ä –∏–∑ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞.',
				'(–º–æ–Ω—Å—Ç—Ä|monster)': '–º–æ–Ω—Å—Ç—Ä ‚Äî –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ —Å —É–∂–∞—Å–∞—é—â–∏–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∏/–∏–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è.',
				'(–º(–∞–π–Ω|–∏–Ω–µ)[–∫—Å]—Ä–∞—Ñ—Ç|minecraft)': 'Minecraft ‚Äî –∏–≥—Ä–∞, –±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –º–µ–Ω—è –±—ã –Ω–µ –±—ã–ª–æ.',
				'(–ª(–∞–π|–∏)–∫–æ–±—Å–∫|likobsk)': () => '–õ–∞–π–∫–æ–±—Å–∫ ‚Äî –≥–æ—Ä–æ–¥, —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç ' + ['–∫—É—Ä–µ–Ω–∏—è', '–∫–æ—Ä–æ–±–∫–æ—Ñ–æ–±–æ–≤', '–æ–≤—Ü–µ–º–æ–±–∏–ª–µ–π', '–≥—Ä–∏—Ñ–µ—Ä—Å—Ç–≤–∞'].pick() + '.',
				'(–ª(–∞–π|–∏)–∫–æ–±|lik0oob)': '–õ–∞–π–∫–æ–± ‚Äî –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞ –õ–∞–π–∫–æ–±—Å–∫ –∏ –≥–ª–∞–≤–∞ –ê–¶–°–ì.',
				'(–∞—Ü—Å–≥|acsg)': 'ACSG ‚Äî –Ω–µ–¥–æ—Ä–∞–∑–≤–∞–ª–∏–≤—à–∞—è—Å—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –±–æ—Ä—å–±–µ —É–∂–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ —Å —á–µ–º.',
				'–æ–∫–æ–ª–æ—Ä–∞–Ω–¥–æ–º': '–û–∫–æ–ª–æ—Ä–∞–Ω–¥–æ–º—å–µ ‚Äî –º–∏—Ä—ã, –æ–∫—Ä—É–∂–∞—é—â–∏–µ –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç –∏ –µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.',
				'(—Ö–∞–æ—Å[ -]?–∫—Ä–∞—Ñ—Ç|chaos ?craft)': () => '–•–∞–æ—Å–ö—Ä–∞—Ñ—Ç ‚Äî —Å–µ—Ä–≤–µ—Ä, ' + [
					'—Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–≤—à–∏–π—Å—è –∏–∑ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞ –≤ –î–∏—Å–∫–æ—Ä–¥',
					'–∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ –Ω—É–∂–Ω–∞ —Ä–µ–∫–ª–∞–º–∞',
					'—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤ –û–∫–æ–ª–æ—Ä–∞–Ω–¥–æ–º—å–µ',
					'–≥–¥–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ–≥–ª–∞—Å–Ω—ã–µ',
					'–æ–±—Ä–∞–∑–æ–≤–∞–≤—à–∏–π—Å—è –∏–∑ —Ö–∞–æ—Å–∞',
				].pick() + '.',
				'(—Ä–∞–Ω–¥–æ–º ?–∫—Ä–∞—Ñ—Ç|random ?craft)': '–†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç ‚Äî —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–∫–æ–≥–¥–∞ –±—ã–ª —Ç–æ—Ä—Ç–æ–º.',
				'(—Ä–Ω–∫—Ä|rncr)': 'RnCr ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞—Ä–æ–¥–∏—è –Ω–∞ –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç.',
				'(–ª–≤|–ª–∞–∫–∏|lv|lucky)': 'LuckyVerse ‚Äî –æ–¥–∏–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç–∞.',
				'(javascript|js|–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç)': 'JavaScript ‚Äî —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è —Ä–∞–±–æ—Ç–∞—é.',
				'(–ø–∏—Ç–æ–Ω|python)': '–ü–∏—Ç–æ–Ω ‚Äî —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è –Ω–µ —Ä–∞–±–æ—Ç–∞—é.',
				'–ø–µ—Ç—É[—Ö—á]': '+üêì',
				'(—Ä–∞–Ω–¥–æ–º|random)': '—Ä–∞–Ω–¥–æ–º ‚Äî —ç—Ç–æ —Ç–∞–∫–∞—è –Ω–µ —Å–æ–≤—Å–µ–º —Å–ª—É—á–∞–π–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å.',
				'–±–∞–Ω(?![–∫—Ç–Ω–¥—á—è])': '–±–∞–Ω ‚Äî –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.',
				'–∫–∏–∫(?![—Å—É])': '–∫–∏–∫ ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞.',
				'—Å–∫—Ä–∏–ø—Ç': '—Å–∫—Ä–∏–ø—Ç ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∞ –∫–æ–ª–µ–Ω–∫–µ.',
				'—Å–∫—Ä–∏–Ω(—à–æ—Ç)?—ã?(?![–∞-—è—ëa-z])': '—Å–∫—Ä–∏–Ω—à–æ—Ç ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø—Ä—è–º–∏–∫–æ–º –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.',
				'—Ç–æ—Ä—Ç': '—Ç–æ—Ä—Ç–∏–∫ ‚Äî –≤—Ä–∞–Ω—å—ë!',
				'(–ª–µ–Ω—å|–∏–≥–Ω–æ—Ä)': true,
				//'–ª–µ–Ω—å': '–ª–µ–Ω—å ‚Äî –≤—Ä–æ–¥–µ –ø–æ–º–Ω—é, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, –Ω–æ —á—ë—Ç –≤—Å–ø–æ–º–∏–Ω–∞—Ç—å –ª–µ–Ω—å.',
				'utf-?8': 'UTF-8 –≤–Ç‚Äù –°–É–†—ï–†–Ü–°–Ç–†¬µ–†—ò–†¬µ–†–Ö–†–Ö–°‚Äπ–†‚Ññ –°‚Äû–†—ï–°–Ç–†—ò–†¬∞–°‚Äö –†“ë–†¬ª–°–è –†—ó–†¬µ–°–Ç–†¬µ–†“ë–†¬∞–°‚Ä°–†—ë –†¬Æ–†–Ö–†—ë–†—î–†—ï–†“ë–†¬∞, –†—î–†—ï–†“ë–†—ë–°–Ç–°—ì–°–ã–°‚Ä∞–†—ë–†‚Ññ –°–É–†—ë–†—ò–†–Ü–†—ï–†¬ª–°‚Äπ –°–Ç–†¬∞–†¬∑–†–Ö–°‚Äπ–†—ò –°‚Ä°–†—ë–°–É–†¬ª–†—ï–†—ò –†¬±–†¬∞–†‚Ññ–°‚Äö.',
				'(—Ñ–∏—á|feature)': '—Ñ–∏—á–∞ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã.',
				'(–±–∞–≥|bug)': '–±–∞–≥ ‚Äî –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –¥–æ–ø—É—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º.',
				'(–≥–ª—é–∫|glitch)': '–≥–ª—é–∫ ‚Äî –≤–µ—Ä–Ω—ã–π —Å–∏–º–ø—Ç–æ–º –±–∞–≥–∞.',
				'(–∫–æ–¥–∏–Ω–≥|–ø—Ä–æ–≥—Ä–∞–º–º–∏)': '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–∏–≤–æ–¥—è—â–∞—è –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∏—á –∏ –±–∞–≥–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ.',
				'–æ—à–∏–±–∫': '–æ—à–∏–±–∫–∞ ‚Äî —Ö–∞–æ—Ç–∏—á–Ω–æ –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –∞–Ω–æ–º–∞–ª–∏—è, –¥–µ–ª–∞—é—â–∞—è –Ω–∞—à –º–∏—Ä –±–æ–ª–µ–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º.',
				'—Ö–∞–æ—Å': '—Ö–∞–æ—Å ‚Äî –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –±–µ—Å–ø–æ—Ä—è–¥–æ–∫.',
				'–Ω–∏–∫(–Ω–µ–π–º|(?![–∞-—è—ë]))': '–Ω–∏–∫–Ω–µ–π–º ‚Äî –ø—Å–µ–≤–¥–æ–Ω–∏–º, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–∫–∫–∞—É–Ω—Ç—É, –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–∞–º–æ–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è.',
				'(—Ç–µ—Å—Ç|test)': '—Ç–µ—Å—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ —á–µ–≥–æ-–ª–∏–±–æ.',
				'(–ª—é–±–æ–≤—å|love)': 'The love is a lie. If you love you soon will cry.',
				'(—Ç–æ–º–º–∏|–≤–µ—Ä—Å–µ—Ç—Ç?–∏)': () => '–¢–æ–º–º–∏ –í–µ—Ä—Å–µ—Ç—Ç–∏ –¥–≤–æ—Ä–∞–º–∏ –ø–æ—à—ë–ª. –í –≥–ª—É—Ö–æ–º –ø–µ—Ä–µ—É–ª–∫–µ ' + ['–±–∞–∑—É–∫—É', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∞–ª–º–∞–∑—ã'].pick() + ' –Ω–∞—à—ë–ª.',
				'(–∏–≥—Ä–æ–∫|–ø–ª[–µ–∞–æ]–µ—Ä|player)[ _-]?(—á–∞—Ä|char)': 'PLAYER_CHAR ‚Äî –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –•–∞–æ—Å–ö—Ä–∞—Ñ—Ç.',
				'–ø–ª[–µ–∞–æ]–µ—Ä': '–ø–ª–µ–µ—Ä ‚Äî –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏.',
				'player': 'player ‚Äî –∏–≥—Ä–æ–∫.',
				'–∏–≥—Ä–æ–∫': '–∏–≥—Ä–æ–∫ ‚Äî —Ç–æ—Ç, –∫—Ç–æ –∏–≥—Ä–∞–µ—Ç –≤ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∏–≥—Ä—É.',
				'(—á–∞—Ä|char)': 'char ‚Äî —Ç–æ, –∏–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ—è—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.',
				'(—Å–µ–±—è|–∫—Ä–∏–ø—É—à–∫)': '–æ—Ç–∫—É–¥–∞ –º–Ω–µ –∑–Ω–∞—Ç—å, –∫—Ç–æ —è —Ç–∞–∫–æ–π?',
				'(—è|–º–µ–Ω—è)': '–ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–µ–±—è –≤ –∑–µ—Ä–∫–∞–ª–æ –∏ —É–≤–∏–¥–∏—à—å.',
			};
			
			let lc = m.input.toLowerCase();
			for (let p in known) {
				if (lc.match('(^|[^–∞-—è—ë])' + p)) {
					let result = (typeof known[p] == 'function' ? known[p]() : known[p]);
					if (result) {
						if (result[0] == '+') {
							flags.r = 'react';
							result = result.slice(1);
						}
						return result;
					}
				}
			}
			
			return [
				'–ø–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ—é.',
				'–∫—Ä–∏–ø–µ—Ä –µ–≥–æ –∑–Ω–∞–µ—Ç.',
				'—Å–ø—Ä–æ—Å–∏ —É –ì—É–≥–ª–∞.',
				'–Ω–µ, –Ω–µ —Å–ª—ã—à–∞–ª.',
				'–Ω–µ–∞, –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ.',
				'—á—Ç–æ-—Ç–æ –Ω–µ –ø—Ä–∏–ø–æ–º–Ω—é —Ç–∞–∫–æ–≥–æ.',
				'—Ö–º–º, –Ω–µ, –Ω–µ —Å–ª—ã—à–∞–ª.',
			];
		},
	},
	
	// –∑–∞—á–µ–º
	{
		d: true,
		p: /^ *–∑–∞—á–µ–º([^–∞-—è—ë]|$)/i,
		r: '–∑–∞—á–µ–º ‚Äî —Å–∞–º—ã–π –±–µ—Å—Ç–æ–ª–∫–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –º–∏—Ä–æ–∑–¥–∞–Ω–∏–∏.',
	},
	
	// –≥–æ –≤ –ª—Å
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–≥–æ|–¥–∞–≤–∞–π|–∏–¥–∏|–¥—É–π|–ø–æ(—à–ª–∏|–π–¥—ë–º)|–∑–∞–π–¥–∏) (–ª—É—á—à–µ )?(–∫–æ –º–Ω–µ )?–≤ (–ª—Å|–ø–µ—Ä–µ–ø–∏—Å–∫—É)/i,
		m: 'dm',
		r: '–¥–∞-–¥–∞, —è —Ç—É—Ç.',
	},
	
	
	// —Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç—å - –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ
	
	// –æ—Ä–∞—Ç–æ—Ä-–∫—É—Ä–∞—Ç–æ—Ä
	{
		p: /(^|[^–∞-—è—ë])–æ—Ä—É([^–∞-—è—ë]|$)/i,
		r: '—Ç—ã –æ—Ä—ë—à—å –∏–ª–∏ —Å–º–µ—ë—à—å—Å—è?',
	},
	
	// –∫–∞—Å—Ç–∏—Ç
	{
		d: true,
		p: /(^|[^–∞-—è—ë])–∫–∞—Å—Ç–∏—Ç([^–∞-—è—ë]|$)/i,
		m: 'dm',
		r: [
			'–ö–∞—Å—Ç–∏—Ç, –∫–æ–Ω–µ—á–Ω–æ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.',
			'–ö–∞—Å—Ç–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ –Ω–µ —Å—Ç–æ–∏—Ç.',
			'–≤—É–ª–∫–∞–Ω –ö–∞—Å—Ç–∏—Ç–∞, –∞ –∑–Ω–∞—á–∏—Ç —Å–º–µ—Ä—Ç—å.',
			'–î—Ä–∞–≥–æ–Ω —è–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º.',
		],
	},
	
	// bad creeper
	{
		p: /(^|[^–∞-—è—ë])((?:–∫—Ä–∏–ø[–∞-—è—ë]+|[—Ç–≤]—ã) )?(?:[-‚Äí‚Äì‚Äî‚Äï] )?(?:(?:—Ç—É–ø|–ø–ª[–∞–æ]—Ö|–Ω[–µ–∏] ?—Ö–æ—Ä–æ—à)[–∞-—è—ë]*|–±[—è–∞]–∫[–∞–∏])( –∫—Ä–∏–ø[–∞-—è—ë]+)?/i,
		m: 'react',
		r: (m) => (m[2] || m[3] ? 'üò≠' : false),
	},
	
	// :—è—Å–Ω–æ:
	{
		p: /(^|[^–∞-—è—ë])—è—Å–Ω–æ([^–∞-—è—ë]|$)/i,
		m: 'react',
		r: 'üåû',
	},
	
	// :banana:
	{
		p: /–±–∞–Ω–∞–Ω/i,
		m: 'react',
		r: 'üçå',
	},
	
	// :–±–æ–º–±:
	{
		p: /–±–æ–º–±/i,
		m: 'react',
		r: 'üí£',
	},
	
	// :–ø–∏–Ω–≥–≤–∏–Ω:
	{
		p: /–ø–∏–Ω–≥–≤–∏/i,
		m: 'react',
		r: 'üêß',
	},
	
	// :–ø–∏–Ω–≥:
	{
		p: /(^|[^–∞-—è—ëa-z])(–ø[–∏–æ]–Ω–≥|p[io]ng)/i,
		m: 'react',
		r: 'üèì',
	},
	
	// :saw:
	{
		p: /(^|[^–∞-—è—ë])(–∑–∞|–≤—ã|—Ä–∞—Å|–æ—Ç|–Ω–∞|—Å|–ø–µ—Ä–µ)?–ø–∏–ª(–∏(–º|–ª–∞?|—Ç—å?)?|—é|–µ–Ω[–∞–æ—ã]?)([^–∞-—è—ë]|$)/i,
		r: (m, flags, floodey, message) => {
			if (customReact(message, 'saw')) {
				return true;
			}
		},
	},
	
	// —Ä–æ–∂–æ–∫
	{
		p: /(^|[^–∞-—è—ë])—Ä[–æ–∞]–∂[–æ–µ—ë]–∫/i,
		m: 'react',
		r: 'ü•ê',
	},
	
	// –ª–µ–Ω—Ç–æ—á–∫–∞
	{
		p: /(^|[^–∞-—è—ë])(–Ω–∞|–ø–æ|–∑–∞)–≤—è[–∂–∑]/i,
		m: 'react',
		r: 'üéó',
	},
	
	// win
	{
		p: /(^|[^–∞-—è—ë])(—è|–º—ã) (–ø–æ–±–µ–¥–∏|–≤—ã–∏–≥—Ä–∞|–∑–∞—Ç–∞—â–∏|—Å–¥–µ–ª–∞|—É—Å–ø–µ)–ª/i,
		m: 'react',
		r: 'üèÖ üèÖ üèÖ üèÜ üçå üê© üìØ üé∫'.split(' '),
	},
	
	// dropical trink
	{
		p: /(^|[^–∞-—è—ë])(–∫–∞—Å—Ç–µ—Ä|—Å–æ–∫|juic)/i,
		c: 0.5,
		m: 'react',
		r: 'üçπ',
	},
	
	// :apple:
	{
		p: /apple/i,
		m: 'react',
		r: 'üçè üçè üçé'.split(' '),
	},
	
	// screams
	{
		p: /–∞{10,}[1! ]*/i,
		m: 'react',
		r: 'üôÄ',
	},
	
	// honeywasp
	{
		p: /(^|[^–∞-—è—ëa-z])((—É|–∑–∞|–ø–æ|–∏–∑)?–∂–∞–ª(—å|–∫–æ)|–æ—Å—É|osu)([^–∞-—è—ëa-z]|$)/i,
		m: 'react',
		r: 'üêù',
	},
	
	// ignored
	{
		d: true,
		p: /(^|[^–∞-—è—ë])(–∏–≥–Ω–æ—Ä|—á—Å|–Ω—É —Ç–µ–±—è)/i,
		m: 'react',
		r: 'üòë',
	},
	
	// the love is a lie, if you love you soon will cry.
	{
		p: /(^|[^–µ])(^|[^–∞-—è—ë])–ª—é–±–ª—é/i,
		m: 'react',
		r: 'ü§•',
	},
	
	// phisching
	{
		d: true,
		p: /—Ö–æ—á–µ—à—å|–¥–∞–≤–∞–π/i,
		c: 0.8,
		m: 'react',
		r: 'üé£',
	},
	
	// —Ç–æ—á–Ω–æ
	{
		p: /^ *—Ç–æ—á–Ω–æ([!.]+|$)/i,
		m: 'react',
		r: 'üéØ',
	},
	
	// –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∞ –Ω–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
	{
		p: /(^|[^–∞-—è—ë])(creep(ey|ah)|–∫—Ä–∏–ø—É—à–∫)/i,
		m: 'react',
		c: 0.75,
		r: 'üëã',
	},
	
	// :creeper:
	{
		p: /(^|[^–∞-—è—ë])(creep|–∫—Ä–∏–ø(?!—Ç–æ))/i,
		c: 0.6,
		r: (m, flags, floodey, message) => {
			if (customReact(message, 'creeper')) {
				return true;
			}
		},
	},
	
	// —Å–∫—Ä–æ–π—Å—è/–ø–æ—è–≤–∏—Å—å
	{
		d: true,
		p: /^ *(((–≤–æ—Ä–æ—Ç|–≤–µ—Ä–Ω|–ø–æ(–∫–∞–∂|—è–≤))–∏—Å—å)|—Å(((–∫—Ä–æ|–º–æ|–ª–µ)–π|–ø—Ä—è—á—å)—Å—è|–≥–∏–Ω—å))[,.?! ]*/i,
		r: (m) => {
			hidden = !m[2];
			setStatus();
			return true;
		},
	},
	
	// debug info
	{
		d: true,
		p: /^ *((—Å–ª–µ–π|—Å?–∫–∏–Ω—å|–ø–æ–∫–∞–∂–∏) (–∏–Ω—Ñ—É|–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏|–º–µ—Ç—Ä–∏–∫–∏|–¥–∞–Ω–Ω—ã–µ)|–¥–µ–±–∞–≥)( –≤ –ª—Å)?[!. ]*$/i,
		m: 'dm',
		r: (m) => {
			let now = new Date();
			return [
				'—Å–ª–∏–≤ –∏–Ω—Ñ—ã –æ —Ä–∞–±–æ—Ç–µ (–∑–∞ –¥–∞–Ω–Ω—ã–π —Å–µ–∞–Ω—Å):',
				'',
				'–Ø –æ–Ω–ª–∞–π–Ω —É–∂–µ **`' + dateDiff(+now - since) + '`**.',
				'–í—Ä–µ–º—è –Ω–∞ –º–æ–∏—Ö —á–∞—Å–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:\n**`' + dateStr(since) + '`**.',
				'–í—Ä–µ–º—è –Ω–∞ –º–æ–∏—Ö —á–∞—Å–∞—Ö —Å–µ–π—á–∞—Å:\n**`' + dateStr(now) + '`**.',
				'',
				'–û—Ç–≤–µ—Ç–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ: **`' + stat.replyCount + '/' + stat.readCount + '`**.',
				'–û—Ç–≤–µ—Ç–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ª—Å: **`' + stat.replyCountDM + '/' + stat.readCountDM + '`**.',
				'–ß–∏–ª–ª–∞—É—Ç–æ–≤ –≤—ã–¥–∞–Ω–æ: **`' + stat.chillCount + '`**.',
				'–ü—Ä–∏–∑—ã–≤–∞–Ω–∏–π: **`' + stat.mentionCount + '`**.',
				'',
				'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–≤–µ—Ä–∫–∏: **`' + stat.timeLast + ' –º—Å`**.',
				'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–≤–µ—Ä–∫–∏: **`' + (stat.timeSum / stat.readCount).toFixed(2) + ' –º—Å`**.',
				'–ù–∞–∏–±–æ–ª—å—à–µ–µ –≤—Ä–µ–º—è —Å–≤–µ—Ä–∫–∏: **`' + stat.timeMax + ' –º—Å`**.',
				'–ù–∞–∏–±–æ–ª—å—à–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è:\n**`' + dateDiff(stat.waitMax, true) + '`**.',
				'',
				'–®–∏—à–µ–∫ –Ω–∞–±–∏—Ç–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: **`' + stat.errorCount + '`**.',
				'–ó–∞–ø—É—Å–∫–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: **`' + statLaunches + '`**.',
			].join('\n');
		},
	},
	
	// Discord bot
	{
		d: true,
		p: /–±–æ—Ç/i,
		c: 0.05,
		r: '–ë–∏–ø –ë—É–ø –ë–£–ø –ë–ò–ø.',
	},
	
	// –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∑–≤–∞–ª–∏
	{
		d: true,
		p: /^/,
		r: (m, flags, floodey, message, mentioned) => {
			if (chance(0.4) && (!message.guild || !floodey)) {
				if (mentioned !== true) {
					// –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–ª–∏, –∞ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –ª—Å
					return false;
				}
				return [
					'–∞?',
					'—á—Ç–æ?',
					'–º–º?',
					'–∑–∞—á–µ–º –∑–≤–∞–ª?',
					'–∫—É-–∫—É.',
					'–ø—Ä–∏–≤–µ—Ç.',
					'–¥–∞ –ª–∞–¥–Ω–æ, –º–æ–∂–µ—à—å –Ω–µ –ø—Ä–∏–∑—ã–≤–∞—Ç—å. –í—Å—ë —Ä–∞–≤–Ω–æ —è –µ—â—ë –º–∞–ª–æ —á–µ–≥–æ —É–º–µ—é.',
				];
			} else {
				flags.r = 'react';
				return 'üëã üñê üòë üòê üòÅ üôÉ üôÑ üòì üò™ üò∑ üò∂ üçå üìØ üé∫ üè∏'.split(' ');
			}
		},
	},
];

// –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
function capReply(message, text, flags) {
	let attach;
	if (text.files && typeof text.text == 'string') {
		attach = text.files;
		text = text.text;
	}
	
	if (Array.isArray(text)) {
		//if (Array.isArray(text[0])) {
		//	// set flag in array
		//	flags.r = text.shift()[0];
		//}
		text = text.pick();
	}
	
	if (!text || text === true) {
		return;
	}
	
	if (flags.r != 'react' && (flags.r != 'reply' || !message.guild)) {
		// Capitalizing
		text = text.slice(0, 1).toUpperCase() + text.slice(1);
	}
	
	let opt;
	if (attach) {
		opt = {files: attach};
	}
	
	let f = {
		'reply': () => message.reply(text, opt), // reply w/ @mention
		'say': () => message.channel.send(text, opt), // just say
		'dm': () => message.author.send(text, opt), // force private conversation
		'react': () => message.react(text, opt), // put a reaction instead
	};
	
	if (!f[flags.r]) {
		console.log('Unknown reply type:', flags.r);
		return;
	}
	
	f[flags.r]();
}

// —á–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –±—É–¥–µ–º
function checkReply(message, flags) {
	let now = Date.now();
	let uid = message.author.id;
	
	// –∞–Ω—Ç–∏—Ñ–ª—É–¥-—Å–∏—Å—Ç–µ–º–∞
	if (!floodeys[uid]) {
		floodeys[uid] = {
			time: now,
			chills: 0,
		};
	}
	
	let fdata = floodeys[uid];
	let score = fdata.time - now;
	if (score < 0) {
		fdata.chills = 0;
		score = 0;
	}
	score += floodrate * 1000;
	fdata.time = now + score;
	if (fdata.chills >= floodchills) {
		// –∏–≥–Ω–æ—Ä–∏–º –º–µ—Å—Å–µ–¥–∂
		return false;
	}
	if (score > floodmax * 1000) {
		// –≤—ã–¥–∞—ë–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
		fdata.chills++;
		let resp = [
			'–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!',
			'you are being rate limited!',
			'–≤—Ä–µ–º—è —Ñ–ª—É–¥–∞ –æ–∫–æ–Ω—á–µ–Ω–æ, –¥–∞–≤–∞–π –∏–¥–∏ –æ—Ç–¥—ã—Ö–∞–π.',
			'—ç–π, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!',
			'–æ—Ö–ª–∞–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π, —è –Ω–µ —É—Å–ø–µ–≤–∞—é —á–∏—Ç–∞—Ç—å.',
		];
		capReply(message, resp, flags);
		return 'chillout';
	}
	
	// –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	let mentioned = message.mentions.users.has(myId) || (!message.guild ? 'dm' : false);
	let lc = message.content.trim();
	let m = null;
	let floodey = message.guild && (floodless.indexOf(message.channel.id) != -1);
	
	cutOff = (m, lc) => (m.index ? (lc.slice(0, m.index) + ' ') : '') + lc.slice(m.index + m[0].length);
	
	// <@...> mentioning
	m = lc.match('<@' + myId + '>[,.?! ]*');
	if (m) {
		lc = cutOff(m, lc);
	}
	
	// parsing & removing discord's markdown to creepers green away from here.
	let parsed = parseMd(lc);
	// code blocks are ignored by default
	lc = plainText(parsed, 'c');
	
	// text name mentioning
	m = lc.match(/([,.?!] *|^)(–∫—Ä–∏–ø((—É—à|–æ–Ω—å)–∫–∞|–∞–∫?|–µ—Ä(–∞—Å—Ç)?|—á?–∏–∫)|creep(e[ry]|ah|ie))([,.?!] *|$)/i);
	if (m) {
		mentioned = true;
		lc = cutOff(m, lc);
	}
	
	// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –±–∞–∑–µ
	for (let item of responses) {
		// direct
		if (item.d === true && !mentioned) {
			continue;
		}
		// chance
		if (typeof item.c === 'number' && !chance(item.c)) {
			continue;
		}
		// check cooldown
		if (item.t && timestamps[item.t[0]] > now) {
			continue;
		}
		
		let m = lc.match(item.p);
		
		if (!m) {
			continue;
		}
		
		// indirect
		if (item.d === 'indirect' && !mentioned && m[0].length != lc.length) {
			continue;
		}
		
		let resp = item.r;
		
		// exec if function
		if (typeof resp === 'function') {
			resp = resp(m, flags, floodey, message, mentioned);
		}
		
		if (!resp) {
			continue;
		}
		
		// set cooldown
		if (item.t) {
			timestamps[item.t[0]] = now + item.t[1];
		}
		
		// method
		if (item.m) {
			flags.r = item.m;
		}
		
		if (typeof resp.then == 'function') {
			resp.then((resp) => capReply(message, resp, flags));
		} else {
			capReply(message, resp, flags);
		}
		return true;
	}
	return false;
}

function processMessage(message) {
	try {
		let flags = {
			r: 'reply', // reply with mentioning by default
		};
		
		// stats before
		let start = Date.now();
		
		let waited = start - stat.waitLast;
		if (stat.waitMax < waited) {
			stat.waitMax = waited;
		}
		stat.waitLast = start;
		
		// –∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç
		let replied = checkReply(message, flags);
		
		// stats after
		let end = Date.now();
		
		stat.readCount++;
		stat.readCountDM += +!message.guild;
		if (replied) {
			if (replied === 'chillout') {
				stat.chillCount++;
			}
			stat.replyCount++;
			stat.replyCountDM += +!message.guild;
		}
		
		stat.mentionCount += +message.mentions.users.has(myId);
		
		stat.waitLast = end;
		
		stat.timeLast = end - start;
		stat.timeSum += stat.timeLast;
		if (stat.timeMax < stat.timeLast) {
			stat.timeMax = stat.timeLast;
			console.log('Max time achieved: ' + stat.timeLast + ' ms on phrase', message.content);
		}
		
	} catch(e) {
		console.log('Error got on phrase', message.content);
		console.error(e);
		stat.errorCount++;
	}
}

// –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
client.on('message', message => {
	if (wrecked || message.system || message.author.bot || message.author.id == myId) {
		return;
	}
	
	try {
		
		/*
		if (typeof mus != 'undefined' && message.guild && mus[message.guild.id] && mus[message.guild.id].tid == message.channel.id) {
			//musicProcess(message);
			
			return;
		}
		*/
		
		// delay is necessary for correct message ordering
		// because sometimes bot is too fast
		setTimeout(processMessage, 80, message);
		
	} catch(e) {
		console.error(e);
		//wrecked = true;
		//message.reply(e.name + ': ' + e.message);
	}
});

// —Å—Ä–∞–∑—É, –∫–∞–∫ –∑–∞–π–¥—ë—Ç
client.on('ready', () => {
	console.log('I am ready!');
	setStatus();
});


client.login(myToken);





// Discord's markdown parser implementation

// WARNING!!!! Don't dive into this code.
// Code is awful because Discord's markdown behavior is chaotic.

// Seriously, there are a lot of tiny irrational cases and exceptions
// which are better be not known.

var mdChars = {
	'`': 'mmc',
	'*': 'ibt',
	'_': 'iu',
	'~': '-s',
};

// just a part of a parser
function detectMd(s, i, tag, c) {
	
	//console.log(s,';',i,';',tag);
	// checking formatting type
	let type = mdChars[tag[0]][tag.length - 1];
	//console.log(tag,type,c);
	
	if (!type || !(type.charCodeAt(0) > 64) || (tag == '*' && !c.trim())) {
		return null;
	}
	
	// searching the second tag
	//console.log('!1');
	let pos = i;
	while (true) {
		//console.log(s[pos + tag.length] == tag[0], tag.length < 3, tag != '~~');
		while (s.substr(pos, tag.length) == tag && s[pos + tag.length] == tag[0] && tag.length < 3 && tag != '~~') {
			//console.log('skip');
			pos++;
		}
		pos++;
		if (pos == -1) {
			return null;
		}
		pos = s.indexOf(tag, pos);
		//console.log('indice: ',pos);
		if (pos == -1) {
			return null;
		}
		if (s[pos + tag.length] != tag[0] || tag.length >= 3 || tag == '~~') {
			break;
		}
	}
	
	//console.log('!2');
	
	if (tag == '*' && !s.charAt(pos - 1).trim()) {
		return null;
	}
	
	// formatting found
	
	let inner = s.slice(i, pos);
	if (tag[0] == '`' && !inner.trim() && (tag.length < 3 || !inner.match(/[^\n]/))) {
		// surprisingly, these formatting types don't like emptiness, so one more try
		let newpos = s.indexOf(tag, pos + 1);
		if (newpos != -1) {
			pos = newpos;
		}
	}
	
	return [pos, type];
}

// parser
function parseMd(s, style) {
	let o = {
		type: style,
		contents: [],
	};
	// don't parse in code blocks
	if ('mc'.indexOf(style) != -1) {
		o.contents.push(s);
		return o;
	}
	let i = 0;
	let last = '';
	let passed = '';
	while (i < s.length) {
		let c = s[i];
		if (last[0] == c && last.length < 3) {
			if (last == '\\') {
				passed += last;
				last = '';
			} else {
				last += c;
			}
		} else {
			// first tag found
			if (mdChars[last[0]]) {
				let pos = null;
				for (let j = 0; j < last.length; j++) {
					//if (j && i - j == 1 && last[0] == '*') {
					//	continue;
					//}
					pos = detectMd(s, i - j, last.slice(0, last.length - j), c);
					if (pos) {
						let inner = parseMd(s.slice(i - j, pos[0]), pos[1]);
						o.contents.push(passed, inner);
						s = s.slice(pos[0] + last.length - j);
						passed = '';
						last = '';
						i = 0;
						break;
					}
				}
				if (pos) {
					continue;
				}
			}
			
			if (last == '\\') {
				last += c;
				c = '';
			}
			passed += last;
			last = c;
		}
		i++;
	}
	o.contents.push(passed + last);
	return o;
}

// stringifier
function plainText(o, ignored) {
	// "ignored" is a string of chars of styles, their content will be ignored
	let s = [];
	let c = o.contents;
	for (let i = 0; i < c.length; i++) {
		let t = c[i];
		if (typeof t != 'string') {
			if (ignored.indexOf(c[i].type) != -1) {
				s += '\n';
				continue;
			}
			t = plainText(t, ignored);
			if (c[i].type == 'c') {
				t = '\n' + t + '\n';
			}
		}
		s += t;
	}
	return s;
}

})();
