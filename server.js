// –î–∏—Å–∫–æ—Ä–¥-–±–æ—Ç "–ö—Ä–∏–ø—É—à–∫–∞"

const Discord = require('discord.js');
const client = new Discord.Client();

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let myId = '311163859580747778';
let ignores = [
    myId,
];
let wrecked = false;
let hidden = true;


// –≤—ã–¥–∞—ë—Ç true —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
function chance(a) {
	return Math.random() < a;
}

// –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function pick(arr, rand) {
	if (typeof rand == 'undefined') {
		// —Ç—É–ø–æ —Ä–∞–Ω–¥–æ–º–Ω–æ
		return arr[Math.floor(arr.length * Math.random())];
	} else {
		// –ø–æ –æ—Å—Ç–∞—Ç–∫—É
		return arr[rand % arr.length];
	}
}

// —Ö–µ—à –æ—Ç –±—É–∫–≤ —Å—Ç—Ä–æ–∫–∏.
// —á–µ–º –¥–ª–∏–Ω–Ω–µ–µ —Å—Ç—Ä–æ–∫–∞, —Ç–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ –±–æ–ª—å—à–µ —á–∏—Å–ª–æ.
function hashie(str) {
	if (typeof str != 'string') {
		return 0;
	}
	let sum = 0;
	let pos = 0;
	for (let i = 0; i < str.length; i++) {
		if (str[i].match(/[0-9a-z–∞-—è—ë]/)) {
			let n = str.charCodeAt(i);
			// hashing machine
			sum += 13 + (((n % 29) ^ (n % 31) ^ (n % 43) ^ (pos++ % 7)) % 17);
		}
	}
	return sum;
}

function setStatus() {
	if (hidden) {
		client.user.setStatus('invisible');
	} else {
		client.user.setStatus('online');
		client.user.setGame('Discord');
	}
}

// —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –µ—ë –∏–º–µ–Ω–∏
function customReact(message, name) {
	if (!message.guild) {
		// private messaging
		return false;
	}
	let arr = message.guild.emojis.array();
	for (let i = 0; i < arr.length; i++) {
		if (arr[i].name == name) {
			message.react(arr[i]);
			return true;
		}
	}
	// 404
	return false;
}

// –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
function capReply(message, text, flags) {
	if (!text || text === true) {
		return;
	}
	
	if (Array.isArray(text)) {
		text = pick(text);
	}
	
	flags.r = flags.r && !!message.guild; // if PM, write without mention
	
	if (flags.r) {
		// @User, there the text goes.
		return message.reply(text);
	} else {
		// There the text goes.
		text = text.slice(0, 1).toUpperCase() + text.slice(1);
		return message.channel.send(text);
	}
}

// —á–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –±—É–¥–µ–º
function checkReply(message, flags) {
	let mentioned = message.mentions.users.has(myId) || (!message.guild ? 'dm' : false);
    let uc = message.content.trim();
    let lc = uc.toLowerCase();
	let m = null;
    
	function cutOff(m) {
		if (m.index) {
			lc = (lc.slice(0, m.index) + ' ' + lc.slice(m.index + m[0].length)).trim();
			uc = (uc.slice(0, m.index) + ' ' + uc.slice(m.index + m[0].length)).trim();
		} else {
			lc = lc.slice(m.index + m[0].length);
			uc = uc.slice(m.index + m[0].length);
		}
	}
	
	
	// <@...> mentioning
	m = lc.match('<@' + myId + '>[,.?! ]*');
	if (m) {
		cutOff(m);
	}
	
	// text name mentioning
	m = lc.match(/([,.?!] ?|^)(–∫—Ä–∏–ø(—É—à–∫–∞|–∞–∫?|–µ—Ä(–∞—Å—Ç)?)|creep(er|ah))([,.?!] ?|$)/);
	if (m) {
		mentioned = true;
		cutOff(m);
	}
	
	
	// exact match
    if (lc === '–Ω–µ—Ç') {
        return '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç.';
    }
    if (lc === '–Ω–µ–∞') {
        return '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ–∞.';
    }
    if (lc === '> 1') {
		flags.r = false;
        return ['1 <', '< 1', '1 >', '>1<', '<1>'];
    }
	if (lc.match(/^\/?hack[?!. ]*$/)) {
		return 'Eleite Haxxor 1337.';
	}
	
	// Iron Door check
	m = uc.match(/(>\|<|[zcsjh]h?|[–∂—à—Öwx]+|[\|il]{3})[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+–π?([–ªl]|[\/j][li\|\\]\\?)+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+–π?[zsc–∑—Å3]+[–Ωnh]+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+[a-z–∞-—è—ë0-9]*?[\s,.\?!\\\/\*=+-]*[dt–¥—Ç]+([wvb–≤—É—Ñ]|[\|il]{3})+[aeouiy–∞–µ—ë—É—ã–æ–∏—è—ç—é340]+[rp—Ä]+[a-z–∞-—è—ë0-9]*/gi);
	if (m) {
		for (let i = 0; i < m.length; i++) {
			if (!m[i].match(/^(–ñ–µ–ª–µ–∑–Ω(–∞—è|—É—é) –î–≤–µ—Ä—å|–ñ–µ–ª–µ–∑–Ω–æ–π –î–≤–µ—Ä(–∏|—å—é))$/)) {
				return 'pray to the Iron Door.';
			}
		}
	}
	
	// phrase end
	if (lc.match(/(–¥–∞|–Ω—É) –ª–∞–¥–Ω–æ[?!. ]*$/)) {
		return '—Ö–æ–ª–æ–¥–Ω–æ-–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ.';
	}
	if (lc.match(/–¥–∞ –Ω—É[?!. ]*$/)) {
		return '–Ω—É –¥–∞.';
	}
	if (lc.match(/–Ω—É –¥–∞[?!. ]*$/)) {
		return '–¥–∞ –Ω—É?';
	}
	if (lc.match(/–∏ —á—Ç–æ[?!. ]*$/)) {
		return '–∏ —Ç–æ.';
	}
	if (lc.match(/–Ω—É –∏[?!. ]*$/)) {
		return '–Ω—É –∏ –Ω—É!';
	}
    if (lc.match(/creep[ @_-]creep[?!. ]*$/)) {
        return 'creeperize!';
    }
	if (lc.match(/—Ç—ã –∫—Ç–æ[?!. ]*$/)) {
		return '—Ç—Ä–æ–ª–ª—å –≤ –ø–∞–ª—å—Ç–æ.';
	}
	if (lc.match(/–ª–æ—Ö[?!.]*$/)) {
		return '–≤–æ –¥–≤–æ—Ä–µ —Ä–∞—Å—Ç—ë—Ç –≥–æ—Ä–æ—Ö.';
	}
	
	// bad words end
    if (lc.match(/(^|[^–∞-—è—ë])–±–ª—è—Ç—å[?!.,]*$/)) {
        return '–Ω–µ—Ö–æ—Ä–æ—à–æ —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å.';
    }
	
	// bad words
	if (lc.match(/((^|[^–∞-—è—ë])((—Å|–Ω[–∞–µ–∏]|[–ø–¥]?–æ)?—Ö—É[–π–µ—è—é–∏—ë]|–º—É–¥[–∞–µ–∏—è–æ]|—Å—É–∫[–∞–∏–µ—É]|–±–ª—è|–ø[–∏–µ]–¥–æ|(—É|[—Å–≤]—ä|–æ—Ç|—Ä[–∞–æ]–∑|(–ø—Ä|[–¥–∑–≤–ø–Ω])[–∞—ã–æ–∏–µ])?[–µ—ë]–±|[–µ—ë]–ø—Ç|–æ?–ø[–∏–µ—ë—é–π]–∑–¥|(–≤—ã|—É)?—Å–∏?—Ä–∞|([—É—Å–≤]|–æ—Ç|—Ä[–∞–æ]–∑|(–ø—Ä|[–¥–∑–≤–ø–Ω])[–∞—ã–æ–∏–µ])?–¥—Ä[–∞–æ]—á)|(fu|di|su)ck)/)) {
		return 'please, be polite!';
	}
	// bad words 2
	if (lc.match(/(^|[^–∞-—è—ë])(–¥(–∞—É|–æ–≤–µ)–Ω|–∫—Ä[–∏–µ]—Ç–∏–Ω|—Å–≤–æ–ª[–∞–æ]—á|–∏–¥[–∏–µ]–æ—Ç|–º—Ä–∞–∑)/)) {
		return '–æ–±–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ—Ö–æ—Ä–æ—à–æ.';
	}
	
	// –Ω–∏–∫–∏ –î—Ä–∞–≥–æ–Ω–∞
	m = uc.match(/(Dragon2488|Archengius)/);
    if (m) {
        return '`' + m[0] + '` is deprecated. Use `AntiquiAvium` instead.';
    }
    if (lc.match(/(^|[^–∞-—è—ë])–¥—Ä–∞–≥–æ–Ω/)) {
        return ['–æ–Ω –≤–∞–º –Ω–µ –î—Ä–∞–≥–æ–Ω.', '#–æ–Ω–≤–∞–º–Ω–µ–¥—Ä–∞–≥–æ–Ω'];
    }
	
	// –∫–∞–∫ —Ç–∞–∫?
    if (lc.match(/(^|[^–∞-—è—ë])–∫–∞–∫ (–∂–µ )?—Ç–∞–∫[?!]*$/)) {
        return [
            '–Ω—É –≤–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.',
            '–∫–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –≤–æ—Ç –∫–∞–∫ –±—ã –Ω–µ —Ç–∞–∫.',
            '–≤–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫-—Ç–æ —Ç–∞–∫ –≤–æ—Ç.',
            '–∫–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –Ω–∏–∫–∞–∫-—Ç–æ –Ω–∏–∫–∞–∫.',
            '—Ç–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –∫–∞–∫-—Ç–æ —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∫–∞–∫.',
        ];
    }
	
	// –ø—Ä–æ—â–∞–Ω–∏–µ
	m = lc.match(/(^|[^–∞-—è—ë])(–ø–æ–∫–∞|–ø—Ä–æ—â–∞–π|–¥–æ (—Å–≤–∏–¥–∞–Ω[–∏—å]—è|—Å–∫–æ—Ä–æ–π( –≤—Å—Ç—Ä–µ—á–∏)|–≤—Å—Ç—Ä–µ—á–∏))[,.?! ]*/);
	if (m && (mentioned || m[0].length == lc.length)) {
		if (chance(0.2)) {
			return [
				'—ç–π, —Ç—ã –∫—É–¥–∞? –ù–µ –±—Ä–æ—Å–∞–π –º–µ–Ω—è!',
				'–Ω–µ —É—Ö–æ–¥–∏! –ú–Ω–µ —Å–∫—É—á–Ω–æ –æ–¥–Ω–æ–º—É!',
				'–∞–≥–∞, —â–∞—Å! –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!',
				'–Ω–µ –±—Ä–æ—Å–∞–π –º–µ–Ω—è –æ–¥–Ω–æ–≥–æ!',
				'—ç–π, –∞ –∫–∞–∫ –∂–µ —è?',
			];
		}
		return [
			'–ø–æ–∫–∞!',
			'–ø–æ–∫–∞.',
			'–ø–æ–∫–∞-–ø–æ–∫–∞.',
			'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
			'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è.',
			'–¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!',
		];
	}
	
	// –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	m = lc.match(/(–ø—Ä–∏–≤–µ—Ç(-–ø—Ä–∏–≤–µ—Ç)?|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä|–∫—É-?–∫—É)[,.?! ]*/);
	if (m && (mentioned || m[0].length == lc.length)) {
		if (m[1].endsWith('–≤–µ—Ç') && chance(0.1)) {
			return '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç!';
		}
		return [
			'–ø—Ä–∏–≤–µ—Ç!',
			'–ø—Ä–∏–≤–µ—Ç.',
			'–ø—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç.',
			'–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!',
			'–∏ —Ç–µ–±–µ –Ω–µ —Ö–≤–æ—Ä–∞—Ç—å!',
		];
	}
	
	// —Ä–∞–∑–Ω–æ–µ
	if (lc.match(/(^|[^–∞-—è—ë])–Ω–æ—Ä–º–∞–ª—å–Ω–æ/)) {
		return '–Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏–ª–∏ —Ö–æ—Ä–æ—à–æ?';
	}
	if (lc.match(/(^|[^–∞-—è—ë])—Ö–æ—Ä–æ—à–æ/) && chance(0.4)) {
		return '—Ö–æ—Ä–æ—à–æ –∏–ª–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ?';
	}
	// bug
	if (lc.match(/(^|[^–∞-—è—ë])–Ω–µ( ?(—Å–æ–≤—Å–µ–º|–æ—á–µ–Ω—å) )?((–ø—Ä–∞–≤–∏–ª—å|–∫–æ—Ä—Ä–µ–∫—Ç|–≤–µ—Ä|—Ç–æ—á)–Ω–æ)? —Ä–∞–±–æ—Ç–∞[–µ—é–∏]—Ç/)) {
		message.react('üêõ');
		return;
	}
	// –∫—É–∫–∞—Ä–µ–∫—É
	if (lc.match(/–∫—É-?–∫–∞-?—Ä–µ-?–∫—É/)) {
		message.react('üêì');
		return;
	}
	
	// yeah, but ...
	if (lc.match(/^yeah, but/m)) {
		flags.r = false;
		return '> Yeah, but\nYabbits live in the woods.';
	}
	
	// —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
	m = lc.match(/(^| )[ ()0-9.*\/+-]*[0-9][ ()0-9.*\/+-]*[*\/+-][ ()0-9.*\/+-]*[0-9][()0-9.*\/+-]*/g);
	if (m && m.length == 1) {
		try {
			let result = eval(m[0]);
			if (typeof result === 'number') {
				return String(parseFloat(result.toPrecision(15)));
			}
		} catch(e) {}
	}
	
	// :creeper:
	if (!mentioned && lc.match(/(^|[^–∞-—è–ê-–Ø—ë–Å])(creep|–∫—Ä–∏–ø)/)) {
		if (customReact(message, 'creeper')) {
			return;
		}
	}
	// –±–∞–Ω–∞–Ω
	if (!mentioned && lc.match(/–±–∞–Ω–∞–Ω/)) {
		message.react('üçå');
		return;
	}
	
	
	
	// —Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
	if (!mentioned) {
		return;
	}
	
	
	// exact match mentioned
	m = lc.match(/(((–≤–æ—Ä–æ—Ç|–≤–µ—Ä–Ω|–ø–æ(–∫–∞–∂|—è–≤))–∏—Å—å)|(—Å(–∫—Ä–æ|–º–æ|–ª–µ)–π|—Å–ø—Ä—è—á—å)—Å—è)[,.?! ]*/);
	if (m) {
		hidden = !m[2];
		setStatus();
		return '';
	}
	
	// eval = evil
	if (lc.match(/(^|[^–∞-—è—ë])eval/)) {
		return [
			'eval —Ä–∞–≤–Ω–æ evil —Ä–∞–≤–Ω–æ –Ω–∞ –≥–æ–ª–æ–≤—É anvil.',
			'eval —Ç–∞–∫–æ–π evil, —Ö–∞–∫–µ—Ä –≤–∏—Ä—É—Å –Ω–∞—Ç—Ä–∞–≤–∏–ª.',
			'–∑–∞ —Ç–∞–∫–æ–π –ø—Ä–æ—Å—Ç–æ–π eval –º–æ–¥–µ—Ä –±–∞–Ω—ã —Ä–∞–∑–¥–∞–≤–∞–ª.',
			'–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π eval, –∫–æ–º–ø —Ç—Ä–∏ –Ω–æ—á–∏ –æ—Å—Ç—ã–≤–∞–ª.',
			'–∑–∞ —Ç–∞–∫–æ–π –ø—Ä–æ—Å—Ç–æ–π eval –∞–¥–º–∏–Ω –æ–ø–∫—É –æ—Ç–∑—ã–≤–∞–ª.',
			'—Å–∫–≤–æ–∑—å –æ–¥–∏–Ω —Ç–∞–∫–æ–π eval —Ö–∞–∫–µ—Ä –¥–µ–Ω—å–≥–∏ –æ—Ç–º—ã–≤–∞–ª.',
			'–∫–∞–∫-—Ç–æ –±—ã–ª –æ–¥–∏–Ω eval, –∫–æ–¥–µ—Ä —Å—Ç–µ–Ω—ã –æ—Ç–º—ã–≤–∞–ª.',
			'–º–∏–ª—ã–π –¥–æ–±—Ä–µ–Ω—å–∫–∏–π eval –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏–≤–∞–ª.',
			'–¥–æ–±—Ä—ã–π –º–∏–ª–µ–Ω—å–∫–∏–π eval –≤–∞–ª–∏—Ç —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø–æ–≤–∞–ª.',
			'–∑–∞–ø—É—Å—Ç–∏–ª –æ–¥–∏–Ω eval, —Å–µ—Ä–≤–µ—Ä –ª—ë–≥ –∏ –Ω–µ –≤—Å—Ç–∞–≤–∞–ª.',
		];
	}
	
	// drop database
	m = lc.match(/drop\s+(database|table)/);
	if (m) {
		let obj = (m[1] == 'table' ? '‚îª‚îÅ‚îª' : '[DATABASE]')
		return ['(‚ïØ¬∞–¥¬∞Ôºâ‚ïØÔ∏µ ' + obj, obj + ' Ô∏µ‚ï∞(¬∞–¥¬∞‚ï∞Ôºâ'];
	}
	
	// —Ç—ã —Ç—É—Ç?
	if (lc.match(/(^|[^–∞-—è—ë])(—Ç—ã (–≥–¥–µ|—Ç—É—Ç|–∫—É–¥–∞)|(–≥–¥–µ|–∫—É–¥–∞) —Ç—ã)/)) {
		return [
			'—è —Ç—É—Ç.',
			'—è –∑–¥–µ—Å—å.',
			'–ø—Ä–∏–≤–µ—Ç, —è —Ç—É—Ç.',
			'–∫—É-–∫—É.',
			'–≤–æ—Ç —è –≥–¥–µ!',
			'–¥–∞ –∑–¥–µ—Å—å —è, –∑–¥–µ—Å—å.',
			'–¥–∞-–¥–∞, —è –∑–¥–µ—Å—å.',
		];
	}
	
	// –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?
	if (lc.match(/(^|[^–∞-—è—ë])–∫–∞–∫(–æ–µ)? (—Ç–≤–æ[–µ—ë] |—É —Ç–µ–±—è )?–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/)) {
		return '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ' + pick(['.', '!', ' :)', ' c:', ' (:']);
	}
	
	// —á—Ç–æ –¥–µ–ª–∞–µ—à—å?
	if (lc.match(/(^|[^–∞-—è—ë])(—á—Ç–æ (—Å–µ–π—á–∞—Å )?–¥–µ–ª–∞–µ—à—å|—á–µ–º (—Å–µ–π—á–∞—Å )?–∑–∞–Ω(—è—Ç|–∏–º–∞–µ—à—å—Å—è))[?]*$/)) {
		return '–æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.';
	}
	
	// –∫–∞–∫ –¥–µ–ª–∞?
	if (lc.match(/(^|[^–∞-—è—ë])–∫–∞–∫ (—Ç–≤–æ–∏ |—É —Ç–µ–±—è )?–¥–µ–ª–∞/)) {
		return '–∫–∞–∫ —Å–∞–∂–∞ –±–µ–ª–∞ ' + pick([':)', '(:']);
	}
	
	// —Ä–æ–±–æ—Ç
	if (lc.match(/(^|[^–∞-—è—ë])[–≤—Ç]—ã (—á–∞—Å–æ–º )?(–Ω–µ )?(—Ä–æ)?–±–æ—Ç/)) {
		return '–Ω–µ—Ç, —è —Å–∫—Ä–∏–ø—Ç.';
	}
	
	// do you like
	if (lc.match(/(^ *(—Ç—ã )?–ª—é–±–∏—à—å [–∞-—è—ë]+|(^|[^–∞-—è—ë])+ –ª—é–±–∏—à—å[?! ]*$)/)) {
		return '–∫–æ—Ä–∏–∞–Ω–¥—Ä –ª—é–±–ª—é.';
	}
	
	// –ø–æ—á–µ–º—É
	m = lc.match(/^ *(?:(?:–Ω–µ )?–∑–Ω–∞–µ—à—å, )?–ø–æ—á–µ–º—É ?([0-9–∞-—è—ëa-z '",~:%<>*&#=+-]*)/);
	if (m) {
		let h = hashie(m[1]);
		if (h < 100) {
			return '–ø–æ—Ç–æ–º—É —á—Ç–æ!';
		}
		return '–ø–æ—Ç–æ–º—É —á—Ç–æ ' + pick([
			'–≤—Å–µ —Ç–∞–∫ –¥—É–º–∞—é—Ç.',
			'—Ç–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ.',
			'–∫—Ä–∏–ø–µ—Ä—ã –∑–µ–ª—ë–Ω—ã–µ.',
			'–Ω–µ–±–æ –≥–æ–ª—É–±–æ–µ.',
			'–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç —É–∂–µ –Ω–µ —Ç–æ—Ä—Ç.',
			'–≤—Å–µ —Ç–∞–∫ —Å—á–∏—Ç–∞—é—Ç.',
			'—Ç–∞–∫ –Ω–∞–¥–æ.',
			'—Ç—ã —Ç–∞–∫ –¥—É–º–∞–µ—à—å.',
			'—Ç–µ–±–µ —Ç–∞–∫ –∫–∞–∂–µ—Ç—Å—è.',
			'–º–∏—Ä –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–µ–Ω.',
			'—Ä–∞–Ω–¥–æ–º –Ω–µ—Ä–∞–Ω–¥–æ–º–µ–Ω.',
		], h);
	}
	
	// –∫—Ç–æ —Ç–∞–∫–æ–π –∫—Ç–æ-—Ç–æ
    if (lc.match(/(^|[^–∞-—è—ë])(–∑–Ω–∞–µ—à—å|[—á–∫]—Ç–æ (–∑–∞|—Ç–∞–∫(–æ–π|–∞—è|–æ–µ)))/)) {
		
		let known = {
			'—Ä—É–ª—å?—Ç': () => {
				return customReact(message, 'rult');
			},
			'–Ω–∞–º–∏': '–ù–∞–º–∏—è –Ω–µ —É–º–µ–µ—Ç —Å—Ç—Ä–æ–∏—Ç—å. –ù–µ –ø–∏—à–∏—Ç–µ –µ–π –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É. –û–Ω–∞ –≤–∞–º –Ω–µ –ø–æ–º–æ–∂–µ—Ç.',
			'–∫–∞–º–∫': '–ö–∞–º–∫–∞ –ª—é–±–∏—Ç, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –≥–æ—Ä–∏—Ç.',
			'–æ–ª–µ–Ω': () => {
				if (chance(0.5)) {
					message.react('ü¶å');
					return true;
				}
				return '–æ–ª–µ–Ω—å ' + pick([
					'–±—ã–ª –∑–∞–≤–µ–∑—ë–Ω —á–µ–ª–æ–≤–µ–∫–æ–º –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏—é –∏ –ù–æ–≤—É—é –ó–µ–ª–∞–Ω–¥–∏—é.',
					'–æ–ª–∏—Ü–µ—Ç–≤–æ—Ä—è–µ—Ç –±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ, –≤–µ–ª–∏—á–∏–µ, –∫—Ä–∞—Å–æ—Ç—É, –≥—Ä–∞—Ü–∏—é, –±—ã—Å—Ç—Ä–æ—Ç—É.',
				]);
			},
			'(google|–≥—É–≥–æ?–ª)': '–Ω–µ –∑–Ω–∞—é, –∑–∞–≥—É–≥–ª–∏.',
			'–ª–∞–π–º[–æ–∞0]–Ω': '–õ–∞–π–º–æ–Ω - —Å–æ–∑–¥–∞—Ç–µ–ª—å –õ–∞–π–º—Å—Ç—É–¥–∏–∏, –õ–∞–π–º–•—Ä–æ–º–∞ –∏ –õ–∞–π–º–û–°,\n–∞ —Ç–∞–∫–∂–µ –õ–∞–π–º–ú–æ–±–∏–ª—è, –õ–∞–π–º–®–æ–ø–∞, –õ–∞–π–º–ö–æ–∏–Ω–∞ –∏ –õ–∞–π–º–°–∏—Ç–∏.',
			'—Ö–∞–π–≤[–æ–∞]–Ω': '–ö—Ä–∞—Å–Ω—ã–π –û–ª–µ–Ω—å.',
			'–≤–∞—Å—è': '–í–∞—Å—è - –Ω—ã–Ω–µ—à–Ω–∏–π –∞–¥–º–∏–Ω –†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç–∞.',
			'(–¥–∏—Å–∫–æ—Ä–¥|discord)': '–î–∏—Å–∫–æ—Ä–¥ - –º–µ—Å—Ç–æ, –≥–¥–µ –º—ã –æ–±–∏—Ç–∞–µ–º.',
			'—Ä—É—Ç—Å?—á–∏': '—ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞ —Å–æ–≤–∫–∞—Ö —Ç–∞—â–∏—Ç.',
			'(–≥–µ—Ç–∞–ø|getup)': () => {
				if (chance(0.5) && customReact(message, 'orangeCaster')) {
					return;
				}
				return '–ì–µ—Ç–∞–ø - –∫–∞—Å—Ç–∏—Ç–∏–∑–∞—Ç–æ—Ä –ó–µ–º–µ–ª—å –†–∞–Ω–¥–æ–º—Å–∫–∏—Ö.';
			},
			'(–æ—Ä–∞–Ω–∂|–∫–∞—Å—Ç–µ—Ä)': () => {
				message.react('üçπ');
				return true;
			},
			'(–∫–∞—Å—Ç–∏—Ç|castit)': 'CastIT - –ø–æ–ª—É–∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π —Å–∞–π—Ç –ì–µ—Ç–∞–ø–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ, –∫ —Ç–æ–º—É –∂–µ, –≤—ã–≥–æ—Ä–µ–ª –¥–æ–º–µ–Ω.',
			'—Å–º–µ—Ç–∞–Ω': '—Å–º–µ—Ç–∞–Ω–∞ –≤–∫—É—Å–Ω–∞—è.',
			'–∫—Ä–∏–ø(–µ—Ä|–∞–∫)': '–∫—Ä–∏–ø–µ—Ä - –∑–µ–ª—ë–Ω—ã–π –º–æ–Ω—Å—Ç—Ä –∏–∑ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞.',
			'(–º(–∞–π–Ω|–∏–Ω–µ)[–∫—Å]—Ä–∞—Ñ—Ç|minecraft)': 'Minecraft - –∏–≥—Ä–∞, –±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –º–µ–Ω—è –±—ã –Ω–µ –±—ã–ª–æ.',
			'–ª–∞–π–∫–æ–±—Å–∫': () => {
				return '–õ–∞–π–∫–æ–±—Å–∫ - –≥–æ—Ä–æ–¥, —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç ' + pick(['–∫—É—Ä–µ–Ω–∏—è', '–∫–æ—Ä–æ–±–∫–æ—Ñ–æ–±–æ–≤', '–æ–≤—Ü–µ–º–æ–±–∏–ª–µ–π', '–≥—Ä–∏—Ñ–µ—Ä—Å—Ç–≤–∞']) + '.';
			},
			'(—Ä–∞–Ω–¥–æ–º ?–∫—Ä–∞—Ñ—Ç|random ?craft)': '–†–∞–Ω–¥–æ–º–ö—Ä–∞—Ñ—Ç - —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–∫–æ–≥–¥–∞ –±—ã–ª —Ç–æ—Ä—Ç–æ–º.',
			'(lv|lucky|–ª–∞–∫–∏)': '–°—Ç–∏–ª–∫—Ä–∞—Ñ—Ç –∫—Ä—É—Ç–æ–π, –õ–∞–∫–∏–í—ë—Ä—Å –æ—Ç—Å—Ç–æ–π.',
			'(javascript|js)': 'JavaScript - —ç—Ç–æ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —è —Ä–∞–±–æ—Ç–∞—é.',
			'–±–∞–Ω(?![–∫—Ç–Ω–¥—á—è])': '–±–∞–Ω - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.',
			'(—Ç—ã|—Å–µ–±—è|–∫—Ä–∏–ø—É—à–∫)': '–æ—Ç–∫—É–¥–∞ –º–Ω–µ –∑–Ω–∞—Ç—å, –∫—Ç–æ —è —Ç–∞–∫–æ–π?',
			'–ø–ª[–µ–∞–æ]–µ—Ä': '–¢–æ–º–º–∏ –í–µ—Ä—Å–µ—Ç—Ç–∏ –¥–≤–æ—Ä–∞–º–∏ –ø–æ—à—ë–ª.\n–í –≥–ª—É—Ö–æ–º –ø–µ—Ä–µ—É–ª–∫–µ –±–∞–∑—É–∫—É –Ω–∞—à—ë–ª.',
		};
		
		for (let p in known) {
			if (lc.match('(^|[^–∞-—è—ë])' + p)) {
				let result = (typeof known[p] == 'function' ? known[p]() : known[p]);
				if (result) {
					return result;
				}
			}
		}
		return [
			'–ø–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ—é.',
			'–∫—Ä–∏–ø–µ—Ä –µ–≥–æ –∑–Ω–∞–µ—Ç.',
			'—Å–ø—Ä–æ—Å–∏ —É –ì—É–≥–ª–∞.',
			'–Ω–µ, –Ω–µ —Å–ª—ã—à–∞–ª.',
			'—ç–º–º.. —á—Ç–æ?',
			'—ç–º–º.. —á—Ç–æ? –ù–µ, –Ω–µ —Å–ª—ã—à–∞–ª.',
		];
	}
	
	// –≥–æ –≤ –ª—Å
	if (lc.match(/(–≥–æ|–¥–∞–≤–∞–π|–∏–¥–∏|–¥—É–π|–ø–æ(—à–ª–∏|–π–¥—ë–º)|–∑–∞–π–¥–∏) (–ª—É—á—à–µ )?(–∫–æ –º–Ω–µ )?–≤ (–ª—Å|–ø–µ—Ä–µ–ø–∏—Å–∫—É)/)) {
		message.author.send('–î–∞-–¥–∞, —è —Ç—É—Ç.');
		return;
	}
	
	// –±–∞–Ω–∞–Ω
	if (lc.match(/–±–∞–Ω–∞–Ω/)) {
		message.react('üçå');
		return;
	}
	
	// –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∑–≤–∞–ª–∏
	if (chance(0.4) && (!message.guild || message.channel.id === '236835572692287488')) {
		if (mentioned !== true) {
			// –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–ª–∏, –∞ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –ª—Å
			return;
		}
		return [
			'–∞?',
			'—á—Ç–æ?',
			'–∑–∞—á–µ–º –∑–≤–∞–ª?',
			'–∫—É-–∫—É.',
			'–ø—Ä–∏–≤–µ—Ç.',
			'–¥–∞ –ª–∞–¥–Ω–æ, –ø–µ—Ä–µ—Å—Ç–∞–Ω—å. –í—Å—ë —Ä–∞–≤–Ω–æ —è –µ—â—ë –º–∞–ª–æ —á–µ–≥–æ —É–º–µ—é.',
		];
	} else {
		message.react(pick('üëã üñê üòë üòê üòÅ üôÉ üôÑ üòì üò™ üçå üìØ üé∫ üè∏'.split(' ')));
		return;
	}
	
}

function processMessage(message) {
    try {
		let flags = {
			r: true, // reply with mentioning
		};
		// –∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç
		capReply(message, checkReply(message, flags), flags);

    } catch(e) {
		console.error(e);
		//wrecked = true;
        //message.reply(e.name + ': ' + e.message);
    }
}

// –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
client.on('message', message => {
	if (wrecked || message.system || message.author.bot) {
		return;
	}
	
	// –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ç—å —Å–µ–±—è
	if (ignores.indexOf(message.author.id) !== -1) {
		return;
	}
	
	// delay is necessary for correct message ordering
	// because sometimes bot is too fast
	setTimeout(processMessage, 100, message);
});

// —Å—Ä–∞–∑—É, –∫–∞–∫ –∑–∞–π–¥—ë—Ç
client.on('ready', () => {
    console.log('I am ready!');
	setStatus();
});


client.login('MzExMTYzODU5NTgwNzQ3Nzc4.C_Ijtg.32OP4QU9LYx2MKiJUhYy0RIZPmE');
