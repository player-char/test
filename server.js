const Discord = require('discord.js');
const client = new Discord.Client();


client.on('ready', () => {
    console.log('I am ready!');
	client.user.setGame('Discord');
});

let myId = '311163859580747778';
let ignores = [
    myId
];
let wrecked = false;

function chance(a) {
	return Math.random < a;
}

function pick(arr) {
    return arr[Math.floor(arr.length * Math.random())];
}

function capReply(message, text) {
	if (!text) {
		return;
	}
	if (Array.isArray(text)) {
		text = pick(text);
	}
	if (!message.guild) {
		text = text.slice(0, 1).toUpperCase() + text.slice(1);
	}
	message.reply(text);
}

function checkReply(message) {
	let mentioned = message.mentions.users.has(myId);
    let c = message.content;
    let lc = c.toLowerCase().trim();
	let m = null;
    
	// exact match
    if (lc === '–Ω–µ—Ç') {
        return '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç.';
    }
    if (lc === '–Ω–µ–∞') {
        return '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ–∞.';
    }
    if (lc === '> 1') {
        return ['1 <', '< 1', '1 >', '>1<', '<1>'];
    }
	
	// phrase end
	if (lc.match(/(–¥–∞|–Ω—É) –ª–∞–¥–Ω–æ[?!. ]*$/)) {
		return '—Ö–æ–ª–æ–¥–Ω–æ-–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ.';
	}
	if (lc.match(/–¥–∞ –Ω—É[?!. ]*$/)) {
		return '–Ω—É –¥–∞.';
	}
	if (lc.match(/–Ω—É –¥–∞[?!. ]*$/)) {
		return '–¥–∞ –Ω—É?';
	}
    if (lc.match(/creep[ @_-]creep[?!. ]*$/)) {
        return 'creeperize!';
    }
	
	// bad words end
    if (lc.match(/(^|[^–∞-—è–ê-–Ø—ë–Å])–±–ª—è—Ç—å[?!.,]*$/)) {
        return '–Ω–µ—Ö–æ—Ä–æ—à–æ —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å.';
    }
	
	// bad words
	if (lc.match(/((^|[^–∞-—è–ê-–Ø—ë–Å])((–Ω[–∞–µ–∏]|–ø?–æ)?—Ö—É[–π–µ—è—é–∏—ë]|–º—É–¥[–∞–µ–∏—è–æ]|—Å—É–∫[–∞–∏–µ—É]|–±–ª—è|–ø[–∏–µ]–¥–æ|([—É—Å–≤]|–æ—Ç|—Ä[–∞–æ]–∑|(–ø—Ä|[–¥–∑–≤–ø–Ω])[–∞—ã–æ–∏–µ])?—ä?[–µ—ë]–±|–µ–ø—Ç|–æ?–ø[–∏–µ—ë—é–π]–∑–¥|(–≤—ã|—É)?—Å–∏?—Ä–∞)|(fu|di|su)ck)/)) {
		return 'please, be polite!';
	}
	// bad words 2
	if (lc.match(/–ª–æ—Ö[?!.]*$/)) {
		return '–≤–æ –¥–≤–æ—Ä–µ —Ä–∞—Å—Ç—ë—Ç –≥–æ—Ä–æ—Ö.';
	}
	if (lc.match(/(^|[^–∞-—è–ê-–Ø—ë–Å])(–¥(–∞—É|–æ–≤–µ)–Ω|–∫—Ä[–∏–µ]—Ç–∏–Ω|—Å–≤–æ–ª[–∞–æ]—á|–∏–¥[–∏–µ]–æ—Ç|–º—Ä–∞–∑)/)) {
		return '–æ–±–∑—ã–≤–∞—Ç—å—Å—è –Ω–µ—Ö–æ—Ä–æ—à–æ.';
	}
	
	// –Ω–∏–∫–∏ –î—Ä–∞–≥–æ–Ω–∞
	m = c.match(/(Dragon2488|Archengius)/);
    if (m) {
        return '`' + m[0] + '` is deprecated. Use `AntiquiAvium` instead.';
    }
    if (lc.match(/–¥—Ä–∞–≥–æ–Ω/)) {
        return ['–û–Ω –≤–∞–º –Ω–µ –î—Ä–∞–≥–æ–Ω.', '#–æ–Ω–≤–∞–º–Ω–µ–¥—Ä–∞–≥–æ–Ω'];
    }
	
	// –∫–∞–∫ —Ç–∞–∫?
    if (lc.match(/–∫–∞–∫ —Ç–∞–∫[?!]*$/)) {
        return [
            '–Ω—É –≤–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫.',
            '–∫–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –≤–æ—Ç –∫–∞–∫ –±—ã –Ω–µ —Ç–∞–∫.',
            '–≤–æ—Ç –∫–∞–∫-—Ç–æ —Ç–∞–∫-—Ç–æ —Ç–∞–∫ –≤–æ—Ç.',
            '–∫–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –Ω–∏–∫–∞–∫-—Ç–æ –Ω–∏–∫–∞–∫.',
            '—Ç–∞–∫-—Ç–æ —Ç–∞–∫, –¥–∞ –∫–∞–∫-—Ç–æ —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∫–∞–∫.',
        ];
    }
	
	// –ø—Ä–æ—â–∞–Ω–∏–µ
	if (lc.match(/(–ø–æ–∫–∞|–¥–æ —Å–∫–æ—Ä–æ–π|–ø—Ä–æ—â–∞–π|–¥–æ —Å–≤–∏–¥–∞–Ω[–∏—å]—è)/)
	&& (mentioned || !message.mentions.users.size)) {
		if (chance(0.2)) {
			return [
				'—ç–π, —Ç—ã –∫—É–¥–∞? –ù–µ –±—Ä–æ—Å–∞–π –º–µ–Ω—è!',
				'–Ω–µ —É—Ö–æ–¥–∏! –ú–Ω–µ —Å–∫—É—á–Ω–æ –æ–¥–Ω–æ–º—É!',
				'–∞–≥–∞, —â–∞—Å! –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ!',
				'–Ω–µ –±—Ä–æ—Å–∞–π –º–µ–Ω—è –æ–¥–Ω–æ–≥–æ!',
				'—ç–π, –∞ –∫–∞–∫ –∂–µ —è?',
			];
		}
		return [
			'–ø–æ–∫–∞!',
			'–ø–æ–∫–∞.',
			'–ø–æ–∫–∞-–ø–æ–∫–∞.',
			'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!',
			'–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è.',
			'–¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!',
		];
	}
	
	// –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	if (lc.match(/(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)/)
	&& (mentioned || !message.mentions.users.size)) {
		if (chance(0.02)) {
			return '–∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç!';
		}
		return [
			'–ø—Ä–∏–≤–µ—Ç!',
			'–ø—Ä–∏–≤–µ—Ç.',
			'–ø—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç.',
			'–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!',
			'–∏ —Ç–µ–±–µ –Ω–µ —Ö–≤–æ—Ä–∞—Ç—å!',
		];
	}
	
	// —Ä–∞–∑–Ω–æ–µ
	if (lc.match(/–Ω–æ—Ä–º–∞–ª—å–Ω–æ/)) {
		return '–Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏–ª–∏ —Ö–æ—Ä–æ—à–æ?';
	}
	if (lc.match(/—Ö–æ—Ä–æ—à–æ/) && chance(0.4)) {
		return '—Ö–æ—Ä–æ—à–æ –∏–ª–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ?';
	}
	
	// —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
	m = (' ' + lc).match(/ [ ()0-9.*\/+-]*[0-9][ ()0-9.*\/+-]*[*\/+-][ ()0-9.*\/+-]*[0-9][()0-9.*\/+-]*/g);
	if (m && m.length == 1) {
		try {
			let result = eval(m[0]);
			if (typeof result === 'number') {
				return String(parseFloat(result.toPrecision(15)));
			}
		} catch(e) {}
	}
	
	// –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∑–≤–∞–ª–∏
	if (mentioned) {
		if (chance(0.7) && (!message.guild || message.channel.id === '236835572692287488')) {
			return [
				'–∞?',
				'—á—Ç–æ?',
				'–∑–∞—á–µ–º –∑–≤–∞–ª?',
				'–∫—É-–∫—É.',
				'–ø—Ä–∏–≤–µ—Ç.',
				'–¥–∞ –ª–∞–¥–Ω–æ, –º–æ–∂–µ—à—å –Ω–µ –ø—Ä–∏–∑—ã–≤–∞—Ç—å. –í—Å—ë —Ä–∞–≤–Ω–æ —è –µ—â—ë –º–∞–ª–æ —á–µ–≥–æ —É–º–µ—é.',
			];
		} else {
			message.react(pick('üëã üòë üòÅ üñê üçå üìØ üôÉ üòì'.split(' ')));
			return;
		}
	}
	
	// :creeper:
	if (lc.match(/(^|[^–∞-—è–ê-–Ø—ë–Å])(creep|–∫—Ä–∏–ø)/)) {
		if (message.guild) {
			let creep = message.guild.emojis.get('276820460744736779');
			if (creep) {
				message.react(creep);
				return;
			}
		}
	}
}

client.on('message', message => {
	if (wrecked || message.system) {
		return;
	}
    try {
		
		// –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ç—å —Å–µ–±—è
        if (ignores.indexOf(message.author.id) !== -1) {
            return;
        }
		
		let mentioned = message.mentions.users.has(myId);
		
		// –∫—Ä–∏–ø–µ—Ä–∞ –æ—Ç–≤–µ—Ç
		capReply(message, checkReply(message, mentioned));

    } catch(e) {
		console.error(e);
		//wrecked = true;
        //message.reply(e.name + ': ' + e.message);
    }
});

client.login('MzExMTYzODU5NTgwNzQ3Nzc4.C_Ijtg.32OP4QU9LYx2MKiJUhYy0RIZPmE');
